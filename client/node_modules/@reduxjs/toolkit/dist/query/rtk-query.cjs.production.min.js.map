{"version":3,"sources":["../../src/query/core/apiState.ts","../../src/query/index.ts","../../src/query/utils/copyWithStructuralSharing.ts","../../src/query/fetchBaseQuery.ts","../../src/query/utils/joinUrls.ts","../../src/query/utils/isAbsoluteUrl.ts","../../src/query/HandledError.ts","../../src/query/retry.ts","../../src/query/core/setupListeners.ts","../../src/query/core/buildSelectors.ts","../../src/query/endpointDefinitions.ts","../../src/query/core/buildSlice.ts","../../src/query/core/buildThunks.ts","../../src/query/defaultSerializeQueryArgs.ts","../../src/query/createApi.ts","../../src/query/fakeBaseQuery.ts","../../src/query/core/buildMiddleware/index.ts","../../src/query/core/buildMiddleware/cacheCollection.ts","../../src/query/core/buildMiddleware/invalidationByTags.ts","../../src/query/utils/flatten.ts","../../src/query/core/buildMiddleware/polling.ts","../../src/query/core/buildMiddleware/windowEventHandling.ts","../../src/query/core/buildMiddleware/cacheLifecycle.ts","../../src/query/core/buildMiddleware/queryLifecycle.ts","../../src/query/core/buildMiddleware/devMiddleware.ts","../../src/query/tsHelpers.ts","../../src/query/core/module.ts","../../src/query/utils/isOnline.ts","../../src/query/utils/isDocumentVisible.ts","../../src/query/core/buildInitiate.ts","../../src/query/core/index.ts"],"names":["QueryStatus","QueryStatus2","__markAsModule","exports","__export","buildCreateApi","copyWithStructuralSharing","coreModule","createApi","fakeBaseQuery","fetchBaseQuery","retry","setupListeners","skipSelector","skipToken","isPlainObject","__toModule","require","oldObj","newObj","Array","isArray","newKeys","Object","keys","oldKeys","isSameObject","length","mergeObj","_i","newKeys_1","key","import_toolkit2","defaultFetchFn","args","arguments","fetch","apply","defaultValidateStatus","response","status","handleResponse","responseHandler","__async","text","_e","sent","JSON","parse","stripUndefined","obj","copy","__spreadValues","entries","_f","_a","_this","this","baseUrl","prepareHeaders","x","fetchFn","baseFetchOptions","__objRest","console","warn","_0","_1","arg","signal","getState","url","_a2","method","headers","_g","Headers","body","_h","params","_j","_k","validateStatus","_l","rest","config","__spreadProps","_m","_o","isJsonifiable","body2","toJSON","has","set","_b","get","trim","startsWith","isJsonContentType","stringify","divider","indexOf","query","URLSearchParams","base","RegExp","test","isAbsoluteUrl","replace","withoutTrailingSlash","withoutLeadingSlash","joinUrls","request","Request","requestClone","clone","meta","error","String","e_1","responseClone","responseText","Promise","all","then","r","resultData","e","handleResponseError_1","originalStatus","data","e_2","HandledError","value","defaultBackoff","attempt","maxRetries","attempts","Math","min","timeout","random","resolve","setTimeout","res","assign","baseQuery","defaultOptions","api","extraOptions","options","backoff","retry2","result","e_3","throwImmediately","fail","import_toolkit3","onFocus","createAction","onFocusLost","onOnline","onOffline","initialized","dispatch","customHandler","handleFocus","handleOnline","handleOffline","handleVisibilityChange","window","document","visibilityState","addEventListener","removeEventListener","DefinitionType","DefinitionType2","import_toolkit7","import_toolkit6","calculateProvidedBy","description","queryArg","assertTagTypes","map","expandTagDescription","type","import_toolkit4","import_immer","import_toolkit5","defaultTransformResponse","baseQueryReturnValue","calculateProvidedByThunk","action","endpointDefinitions","assertTagType","endpointName","isFulfilled","payload","isRejectedWithValue","originalArgs","import_immer2","updateQuerySubstateIfExists","state","queryCacheKey","update","substate","getMutationCacheKey","id","fixedCacheKey","requestId","updateMutationSubstateIfExists","initialState","Symbol","for","initialSubState","uninitialized","defaultQuerySubState","createNextState","defaultMutationSubState","import_toolkit8","defaultSerializeQueryArgs","queryArgs","sort","reduce","acc","key2","import_toolkit9","import_reselect","modules","extractRehydrationInfo","defaultMemoize","call","reducerPath","optionsWithDefaults","serializeQueryArgs","keepUnusedDataFor","refetchOnMountOrArgChange","refetchOnFocus","refetchOnReconnect","tagTypes","__spreadArray","context","batch","fn","apiUid","nanoid","hasRehydrationInfo","injectEndpoints","inject","evaluatedEndpoints","endpoints","mutation","definition","overrideExisting","initializedModules_1","initializedModules","injectEndpoint","enhanceEndpoints","addTagTypes","addTagTypes_1","eT","includes","push","partialDefinition","m","init","Error","import_redux","import_toolkit13","build","internalActions","removeQueryResult","unsubscribeQueryResult","mwApi","currentRemovalTimeouts","next","match","handleUnsubscribe","queries","util","resetApiState","clearTimeout","queryState","api2","endpointDefinition","currentTimeout","subscriptions","import_toolkit10","build2","mutationThunk","refetchQuery","isAnyOf","invalidateTags","tags","arr","toInvalidate","Set","tags_1","tag","provided","invalidateSubscriptions_1","values","concat","add","valuesArray_1","from","querySubState","subscriptionSubState","build3","queryThunk","currentPolls","updateSubscriptionOptions","updatePollingInterval","pending","rejected","condition","fulfilled","startNextPoll","poll","clearPolls","lowestPollingInterval","findLowestPollingInterval","Number","isFinite","currentPoll","nextPollTimestamp","Date","now","currentInterval","pollingInterval","subscribers","POSITIVE_INFINITY","subscription","build4","refetchValidQueries","some","sub","every","import_toolkit11","neverResolvedError","build5","isQueryThunk","isAsyncThunkAction","isMutationThunk","isFullfilledThunk","lifecycleMap","stateBefore","cacheKey","removeMutationResult","getCacheKey","oldState","handleNewKey","mutations","lifecycle","valueResolved","baseQueryMeta","cacheEntryRemoved","mwApi2","onCacheEntryAdded","cacheDataLoaded","race","catch","selector","select","extra","_","__","extra2","lifecycleApi","getCacheEntry","updateCachedData","updateRecipe","updateQueryData","runningHandler","import_toolkit12","build6","isPendingThunk","isPending","isRejectedThunk","isRejected","_c","endpointName_1","originalArgs_1","onQueryStarted","lifecycle_1","queryFulfilled","reject","selector_1","isUnhandledError","rejectedWithValue","build7","initialized2","middlewareRegistered","safeAssign","target","import_immer3","coreModuleName","name","enablePatches","executeEndpoint","rejectWithValue","fulfillWithValue","transformResponse","baseQueryApi_1","queryFn","arg2","fulfilledTimeStamp","error_1","matchesEndpoint","createAsyncThunk","getPendingMeta","startedTimeStamp","requestState","fulfilledVal","refetchVal","forceRefetch","subscribe","dispatchConditionRejection","prefetch","force","hasTheForce","maxAge","hasMaxAge","ifOlderThan","queryAction","force2","initiate","latestStateValue","lastFulfilledTs","currentState","ret","patches","inversePatches","undo","patchQueryData","isDraftable","produceWithPatches","op","path","queryResultPatched","buildMatchThunkActions","thunk","matchPending","isAllOf","matchFulfilled","matchRejected","buildThunks","definitions","querySlice","createSlice","reducers","draft","applyPatches","extraReducers","builder","addCase","addMatcher","entry","mutationSlice","track","invalidationSlice","actions","idSubscriptions","foundAt","splice","_d","cacheKeys","subscribedQueries","cacheKeys_1","providedTags","providedTags_1","subscriptionSlice","subscriptionOptions","configSlice","online","navigator","onLine","focused","combinedReducer","combineReducers","reducer","unsubscribeMutationResult","buildSlice","sliceActions","defineProperty","input","middlewares","build8","middleware","applied","compose","middleware2","override","buildMiddleware","buildQuerySelector","selectQuerySubState","createSelector","selectInternalState","internalState","withRequestFlags","buildMutationSelector","mutationId","selectMutationSubstate","isUninitialized","isLoading","isSuccess","isError","rootState","buildSelectors","runningQueries","runningMutations","buildInitiateQuery","thunkResult","abort","statePromise","refetch","unsubscribe","buildInitiateMutation","returnValuePromise","unwrap","reset","getRunningOperationPromises","filter","t","getRunningOperationPromise","argOrRequestId","buildInitiate","anyApi"],"mappings":"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","sourcesContent":["import type { SerializedError } from '@reduxjs/toolkit'\nimport type { BaseQueryError } from '../baseQueryTypes'\nimport type {\n  QueryDefinition,\n  MutationDefinition,\n  EndpointDefinitions,\n  BaseEndpointDefinition,\n  ResultTypeFrom,\n  QueryArgFrom,\n} from '../endpointDefinitions'\nimport type { Id, WithRequiredProp } from '../tsHelpers'\n\nexport type QueryCacheKey = string & { _type: 'queryCacheKey' }\nexport type QuerySubstateIdentifier = { queryCacheKey: QueryCacheKey }\nexport type MutationSubstateIdentifier =\n  | {\n      requestId: string\n      fixedCacheKey?: string\n    }\n  | {\n      requestId?: string\n      fixedCacheKey: string\n    }\n\nexport type RefetchConfigOptions = {\n  refetchOnMountOrArgChange: boolean | number\n  refetchOnReconnect: boolean\n  refetchOnFocus: boolean\n}\n\n/**\n * Strings describing the query state at any given time.\n */\nexport enum QueryStatus {\n  uninitialized = 'uninitialized',\n  pending = 'pending',\n  fulfilled = 'fulfilled',\n  rejected = 'rejected',\n}\n\nexport type RequestStatusFlags =\n  | {\n      status: QueryStatus.uninitialized\n      isUninitialized: true\n      isLoading: false\n      isSuccess: false\n      isError: false\n    }\n  | {\n      status: QueryStatus.pending\n      isUninitialized: false\n      isLoading: true\n      isSuccess: false\n      isError: false\n    }\n  | {\n      status: QueryStatus.fulfilled\n      isUninitialized: false\n      isLoading: false\n      isSuccess: true\n      isError: false\n    }\n  | {\n      status: QueryStatus.rejected\n      isUninitialized: false\n      isLoading: false\n      isSuccess: false\n      isError: true\n    }\n\nexport function getRequestStatusFlags(status: QueryStatus): RequestStatusFlags {\n  return {\n    status,\n    isUninitialized: status === QueryStatus.uninitialized,\n    isLoading: status === QueryStatus.pending,\n    isSuccess: status === QueryStatus.fulfilled,\n    isError: status === QueryStatus.rejected,\n  } as any\n}\n\nexport type SubscriptionOptions = {\n  /**\n   * How frequently to automatically re-fetch data (in milliseconds). Defaults to `0` (off).\n   */\n  pollingInterval?: number\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnReconnect?: boolean\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnFocus?: boolean\n}\nexport type Subscribers = { [requestId: string]: SubscriptionOptions }\nexport type QueryKeys<Definitions extends EndpointDefinitions> = {\n  [K in keyof Definitions]: Definitions[K] extends QueryDefinition<\n    any,\n    any,\n    any,\n    any\n  >\n    ? K\n    : never\n}[keyof Definitions]\nexport type MutationKeys<Definitions extends EndpointDefinitions> = {\n  [K in keyof Definitions]: Definitions[K] extends MutationDefinition<\n    any,\n    any,\n    any,\n    any\n  >\n    ? K\n    : never\n}[keyof Definitions]\n\ntype BaseQuerySubState<D extends BaseEndpointDefinition<any, any, any>> = {\n  /**\n   * The argument originally passed into the hook or `initiate` action call\n   */\n  originalArgs: QueryArgFrom<D>\n  /**\n   * A unique ID associated with the request\n   */\n  requestId: string\n  /**\n   * The received data from the query\n   */\n  data?: ResultTypeFrom<D>\n  /**\n   * The received error if applicable\n   */\n  error?:\n    | SerializedError\n    | (D extends QueryDefinition<any, infer BaseQuery, any, any>\n        ? BaseQueryError<BaseQuery>\n        : never)\n  /**\n   * The name of the endpoint associated with the query\n   */\n  endpointName: string\n  /**\n   * Time that the latest query started\n   */\n  startedTimeStamp: number\n  /**\n   * Time that the latest query was fulfilled\n   */\n  fulfilledTimeStamp?: number\n}\n\nexport type QuerySubState<D extends BaseEndpointDefinition<any, any, any>> = Id<\n  | ({\n      status: QueryStatus.fulfilled\n    } & WithRequiredProp<\n      BaseQuerySubState<D>,\n      'data' | 'fulfilledTimeStamp'\n    > & { error: undefined })\n  | ({\n      status: QueryStatus.pending\n    } & BaseQuerySubState<D>)\n  | ({\n      status: QueryStatus.rejected\n    } & WithRequiredProp<BaseQuerySubState<D>, 'error'>)\n  | {\n      status: QueryStatus.uninitialized\n      originalArgs?: undefined\n      data?: undefined\n      error?: undefined\n      requestId?: undefined\n      endpointName?: string\n      startedTimeStamp?: undefined\n      fulfilledTimeStamp?: undefined\n    }\n>\n\ntype BaseMutationSubState<D extends BaseEndpointDefinition<any, any, any>> = {\n  requestId: string\n  data?: ResultTypeFrom<D>\n  error?:\n    | SerializedError\n    | (D extends MutationDefinition<any, infer BaseQuery, any, any>\n        ? BaseQueryError<BaseQuery>\n        : never)\n  endpointName: string\n  startedTimeStamp: number\n  fulfilledTimeStamp?: number\n}\n\nexport type MutationSubState<D extends BaseEndpointDefinition<any, any, any>> =\n  | (({\n      status: QueryStatus.fulfilled\n    } & WithRequiredProp<\n      BaseMutationSubState<D>,\n      'data' | 'fulfilledTimeStamp'\n    >) & { error: undefined })\n  | (({\n      status: QueryStatus.pending\n    } & BaseMutationSubState<D>) & { data?: undefined })\n  | ({\n      status: QueryStatus.rejected\n    } & WithRequiredProp<BaseMutationSubState<D>, 'error'>)\n  | {\n      requestId?: undefined\n      status: QueryStatus.uninitialized\n      data?: undefined\n      error?: undefined\n      endpointName?: string\n      startedTimeStamp?: undefined\n      fulfilledTimeStamp?: undefined\n    }\n\nexport type CombinedState<\n  D extends EndpointDefinitions,\n  E extends string,\n  ReducerPath extends string\n> = {\n  queries: QueryState<D>\n  mutations: MutationState<D>\n  provided: InvalidationState<E>\n  subscriptions: SubscriptionState\n  config: ConfigState<ReducerPath>\n}\n\nexport type InvalidationState<TagTypes extends string> = {\n  [_ in TagTypes]: {\n    [id: string]: Array<QueryCacheKey>\n    [id: number]: Array<QueryCacheKey>\n  }\n}\n\nexport type QueryState<D extends EndpointDefinitions> = {\n  [queryCacheKey: string]: QuerySubState<D[string]> | undefined\n}\n\nexport type SubscriptionState = {\n  [queryCacheKey: string]: Subscribers | undefined\n}\n\nexport type ConfigState<ReducerPath> = RefetchConfigOptions & {\n  reducerPath: ReducerPath\n  online: boolean\n  focused: boolean\n  middlewareRegistered: boolean | 'conflict'\n} & ModifiableConfigState\n\nexport type ModifiableConfigState = {\n  keepUnusedDataFor: number\n} & RefetchConfigOptions\n\nexport type MutationState<D extends EndpointDefinitions> = {\n  [requestId: string]: MutationSubState<D[string]> | undefined\n}\n\nexport type RootState<\n  Definitions extends EndpointDefinitions,\n  TagTypes extends string,\n  ReducerPath extends string\n> = {\n  [P in ReducerPath]: CombinedState<Definitions, TagTypes, P>\n}\n","export { QueryStatus } from './core/apiState'\nexport type { Api, Module, ApiModules } from './apiTypes'\nexport type { BaseQueryEnhancer, BaseQueryFn } from './baseQueryTypes'\nexport type {\n  EndpointDefinitions,\n  EndpointDefinition,\n  QueryDefinition,\n  MutationDefinition,\n} from './endpointDefinitions'\nexport { fetchBaseQuery } from './fetchBaseQuery'\nexport type {\n  FetchBaseQueryError,\n  FetchBaseQueryMeta,\n  FetchArgs,\n} from './fetchBaseQuery'\nexport { retry } from './retry'\nexport { setupListeners } from './core/setupListeners'\nexport { skipSelector, skipToken, SkipToken } from './core/buildSelectors'\nexport type { CreateApi, CreateApiOptions } from './createApi'\nexport { buildCreateApi } from './createApi'\nexport { fakeBaseQuery } from './fakeBaseQuery'\nexport { copyWithStructuralSharing } from './utils/copyWithStructuralSharing'\nexport { createApi, coreModule } from './core'\n","import { isPlainObject as _iPO } from '@reduxjs/toolkit'\n\n// remove type guard\nconst isPlainObject: (_: any) => boolean = _iPO\n\nexport function copyWithStructuralSharing<T>(oldObj: any, newObj: T): T\nexport function copyWithStructuralSharing(oldObj: any, newObj: any): any {\n  if (\n    oldObj === newObj ||\n    !(\n      (isPlainObject(oldObj) && isPlainObject(newObj)) ||\n      (Array.isArray(oldObj) && Array.isArray(newObj))\n    )\n  ) {\n    return newObj\n  }\n  const newKeys = Object.keys(newObj)\n  const oldKeys = Object.keys(oldObj)\n\n  let isSameObject = newKeys.length === oldKeys.length\n  const mergeObj: any = Array.isArray(newObj) ? [] : {}\n  for (const key of newKeys) {\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key])\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key]\n  }\n  return isSameObject ? oldObj : mergeObj\n}\n","import { joinUrls } from './utils'\nimport { isPlainObject } from '@reduxjs/toolkit'\nimport type { BaseQueryFn } from './baseQueryTypes'\nimport type { MaybePromise, Override } from './tsHelpers'\n\nexport type ResponseHandler =\n  | 'json'\n  | 'text'\n  | ((response: Response) => Promise<any>)\n\ntype CustomRequestInit = Override<\n  RequestInit,\n  {\n    headers?:\n      | Headers\n      | string[][]\n      | Record<string, string | undefined>\n      | undefined\n  }\n>\n\nexport interface FetchArgs extends CustomRequestInit {\n  url: string\n  params?: Record<string, any>\n  body?: any\n  responseHandler?: ResponseHandler\n  validateStatus?: (response: Response, body: any) => boolean\n}\n\n/**\n * A mini-wrapper that passes arguments straight through to\n * {@link [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)}.\n * Avoids storing `fetch` in a closure, in order to permit mocking/monkey-patching.\n */\nconst defaultFetchFn: typeof fetch = (...args) => fetch(...args)\n\nconst defaultValidateStatus = (response: Response) =>\n  response.status >= 200 && response.status <= 299\n\nconst isJsonContentType = (headers: Headers) =>\n  headers.get('content-type')?.trim()?.startsWith('application/json')\n\nconst handleResponse = async (\n  response: Response,\n  responseHandler: ResponseHandler\n) => {\n  if (typeof responseHandler === 'function') {\n    return responseHandler(response)\n  }\n\n  if (responseHandler === 'text') {\n    return response.text()\n  }\n\n  if (responseHandler === 'json') {\n    const text = await response.text()\n    return text.length ? JSON.parse(text) : undefined\n  }\n}\n\nexport type FetchBaseQueryError =\n  | {\n      /**\n       * * `number`:\n       *   HTTP status code\n       */\n      status: number\n      data: unknown\n    }\n  | {\n      /**\n       * * `\"FETCH_ERROR\"`:\n       *   An error that occured during execution of `fetch` or the `fetchFn` callback option\n       **/\n      status: 'FETCH_ERROR'\n      data?: undefined\n      error: string\n    }\n  | {\n      /**\n       * * `\"PARSING_ERROR\"`:\n       *   An error happened during parsing.\n       *   Most likely a non-JSON-response was returned with the default `responseHandler` \"JSON\",\n       *   or an error occured while executing a custom `responseHandler`.\n       **/\n      status: 'PARSING_ERROR'\n      originalStatus: number\n      data: string\n      error: string\n    }\n  | {\n      /**\n       * * `\"CUSTOM_ERROR\"`:\n       *   A custom error type that you can return from your `fetchFn` where another error might not make sense.\n       **/\n      status: 'CUSTOM_ERROR'\n      data?: unknown\n      error: string\n    }\n\nfunction stripUndefined(obj: any) {\n  if (!isPlainObject(obj)) {\n    return obj\n  }\n  const copy: Record<string, any> = { ...obj }\n  for (const [k, v] of Object.entries(copy)) {\n    if (typeof v === 'undefined') delete copy[k]\n  }\n  return copy\n}\n\nexport type FetchBaseQueryArgs = {\n  baseUrl?: string\n  prepareHeaders?: (\n    headers: Headers,\n    api: { getState: () => unknown }\n  ) => MaybePromise<Headers>\n  fetchFn?: (\n    input: RequestInfo,\n    init?: RequestInit | undefined\n  ) => Promise<Response>\n} & RequestInit\n\nexport type FetchBaseQueryMeta = { request: Request; response?: Response }\n\n/**\n * This is a very small wrapper around fetch that aims to simplify requests.\n *\n * @example\n * ```ts\n * const baseQuery = fetchBaseQuery({\n *   baseUrl: 'https://api.your-really-great-app.com/v1/',\n *   prepareHeaders: (headers, { getState }) => {\n *     const token = (getState() as RootState).auth.token;\n *     // If we have a token set in state, let's assume that we should be passing it.\n *     if (token) {\n *       headers.set('authorization', `Bearer ${token}`);\n *     }\n *     return headers;\n *   },\n * })\n * ```\n *\n * @param {string} baseUrl\n * The base URL for an API service.\n * Typically in the format of http://example.com/\n *\n * @param {(headers: Headers, api: { getState: () => unknown }) => Headers} prepareHeaders\n * An optional function that can be used to inject headers on requests.\n * Provides a Headers object, as well as the `getState` function from the\n * redux store. Can be useful for authentication.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Headers\n *\n * @param {(input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>} fetchFn\n * Accepts a custom `fetch` function if you do not want to use the default on the window.\n * Useful in SSR environments if you need to use a library such as `isomorphic-fetch` or `cross-fetch`\n *\n */\nexport function fetchBaseQuery({\n  baseUrl,\n  prepareHeaders = (x) => x,\n  fetchFn = defaultFetchFn,\n  ...baseFetchOptions\n}: FetchBaseQueryArgs = {}): BaseQueryFn<\n  string | FetchArgs,\n  unknown,\n  FetchBaseQueryError,\n  {},\n  FetchBaseQueryMeta\n> {\n  if (typeof fetch === 'undefined' && fetchFn === defaultFetchFn) {\n    console.warn(\n      'Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.'\n    )\n  }\n  return async (arg, { signal, getState }) => {\n    let meta: FetchBaseQueryMeta | undefined\n    let {\n      url,\n      method = 'GET' as const,\n      headers = new Headers({}),\n      body = undefined,\n      params = undefined,\n      responseHandler = 'json' as const,\n      validateStatus = defaultValidateStatus,\n      ...rest\n    } = typeof arg == 'string' ? { url: arg } : arg\n    let config: RequestInit = {\n      ...baseFetchOptions,\n      method,\n      signal,\n      body,\n      ...rest,\n    }\n\n    config.headers = await prepareHeaders(\n      new Headers(stripUndefined(headers)),\n      { getState }\n    )\n\n    // Only set the content-type to json if appropriate. Will not be true for FormData, ArrayBuffer, Blob, etc.\n    const isJsonifiable = (body: any) =>\n      typeof body === 'object' &&\n      (isPlainObject(body) ||\n        Array.isArray(body) ||\n        typeof body.toJSON === 'function')\n\n    if (!config.headers.has('content-type') && isJsonifiable(body)) {\n      config.headers.set('content-type', 'application/json')\n    }\n\n    if (body && isJsonContentType(config.headers)) {\n      config.body = JSON.stringify(body)\n    }\n\n    if (params) {\n      const divider = ~url.indexOf('?') ? '&' : '?'\n      const query = new URLSearchParams(stripUndefined(params))\n      url += divider + query\n    }\n\n    url = joinUrls(baseUrl, url)\n\n    const request = new Request(url, config)\n    const requestClone = request.clone()\n    meta = { request: requestClone }\n\n    let response\n    try {\n      response = await fetchFn(request)\n    } catch (e) {\n      return { error: { status: 'FETCH_ERROR', error: String(e) }, meta }\n    }\n    const responseClone = response.clone()\n\n    meta.response = responseClone\n\n    let resultData: any\n    let responseText: string = ''\n    try {\n      let handleResponseError\n      await Promise.all([\n        handleResponse(response, responseHandler).then(\n          (r) => (resultData = r),\n          (e) => (handleResponseError = e)\n        ),\n        // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\n        // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\n        responseClone.text().then(\n          (r) => (responseText = r),\n          () => {}\n        ),\n      ])\n      if (handleResponseError) throw handleResponseError\n    } catch (e) {\n      return {\n        error: {\n          status: 'PARSING_ERROR',\n          originalStatus: response.status,\n          data: responseText,\n          error: String(e),\n        },\n        meta,\n      }\n    }\n\n    return validateStatus(response, resultData)\n      ? {\n          data: resultData,\n          meta,\n        }\n      : {\n          error: {\n            status: response.status,\n            data: resultData,\n          },\n          meta,\n        }\n  }\n}\n","import { isAbsoluteUrl } from './isAbsoluteUrl'\n\nconst withoutTrailingSlash = (url: string) => url.replace(/\\/$/, '')\nconst withoutLeadingSlash = (url: string) => url.replace(/^\\//, '')\n\nexport function joinUrls(\n  base: string | undefined,\n  url: string | undefined\n): string {\n  if (!base) {\n    return url!\n  }\n  if (!url) {\n    return base\n  }\n\n  if (isAbsoluteUrl(url)) {\n    return url\n  }\n\n  base = withoutTrailingSlash(base)\n  url = withoutLeadingSlash(url)\n\n  return `${base}/${url}`\n}\n","/**\n * If either :// or // is present consider it to be an absolute url\n *\n * @param url string\n */\n\nexport function isAbsoluteUrl(url: string) {\n  return new RegExp(`(^|:)//`).test(url)\n}\n","export class HandledError {\n  constructor(\n    public readonly value: any,\n    public readonly meta: any = undefined\n  ) {}\n}\n","import type { BaseQueryEnhancer } from './baseQueryTypes'\nimport { HandledError } from './HandledError'\n\n/**\n * Exponential backoff based on the attempt number.\n *\n * @remarks\n * 1. 600ms * random(0.4, 1.4)\n * 2. 1200ms * random(0.4, 1.4)\n * 3. 2400ms * random(0.4, 1.4)\n * 4. 4800ms * random(0.4, 1.4)\n * 5. 9600ms * random(0.4, 1.4)\n *\n * @param attempt - Current attempt\n * @param maxRetries - Maximum number of retries\n */\nasync function defaultBackoff(attempt: number = 0, maxRetries: number = 5) {\n  const attempts = Math.min(attempt, maxRetries)\n\n  const timeout = ~~((Math.random() + 0.4) * (300 << attempts)) // Force a positive int in the case we make this an option\n  await new Promise((resolve) =>\n    setTimeout((res: any) => resolve(res), timeout)\n  )\n}\n\ninterface StaggerOptions {\n  /**\n   * How many times the query will be retried (default: 5)\n   */\n  maxRetries?: number\n  /**\n   * Function used to determine delay between retries\n   */\n  backoff?: (attempt: number, maxRetries: number) => Promise<void>\n}\n\nfunction fail(e: any): never {\n  throw Object.assign(new HandledError({ error: e }), {\n    throwImmediately: true,\n  })\n}\n\nconst retryWithBackoff: BaseQueryEnhancer<\n  unknown,\n  StaggerOptions,\n  StaggerOptions | void\n> = (baseQuery, defaultOptions) => async (args, api, extraOptions) => {\n  const options = {\n    maxRetries: 5,\n    backoff: defaultBackoff,\n    ...defaultOptions,\n    ...extraOptions,\n  }\n  let retry = 0\n\n  while (true) {\n    try {\n      const result = await baseQuery(args, api, extraOptions)\n      // baseQueries _should_ return an error property, so we should check for that and throw it to continue retrying\n      if (result.error) {\n        throw new HandledError(result)\n      }\n      return result\n    } catch (e) {\n      retry++\n      if (e.throwImmediately || retry > options.maxRetries) {\n        if (e instanceof HandledError) {\n          return e.value\n        }\n\n        // We don't know what this is, so we have to rethrow it\n        throw e\n      }\n      await options.backoff(retry, options.maxRetries)\n    }\n  }\n}\n\n/**\n * A utility that can wrap `baseQuery` in the API definition to provide retries with a basic exponential backoff.\n *\n * @example\n *\n * ```ts\n * // codeblock-meta title=\"Retry every request 5 times by default\"\n * import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react'\n * interface Post {\n *   id: number\n *   name: string\n * }\n * type PostsResponse = Post[]\n *\n * // maxRetries: 5 is the default, and can be omitted. Shown for documentation purposes.\n * const staggeredBaseQuery = retry(fetchBaseQuery({ baseUrl: '/' }), { maxRetries: 5 });\n * export const api = createApi({\n *   baseQuery: staggeredBaseQuery,\n *   endpoints: (build) => ({\n *     getPosts: build.query<PostsResponse, void>({\n *       query: () => ({ url: 'posts' }),\n *     }),\n *     getPost: build.query<PostsResponse, string>({\n *       query: (id) => ({ url: `post/${id}` }),\n *       extraOptions: { maxRetries: 8 }, // You can override the retry behavior on each endpoint\n *     }),\n *   }),\n * });\n *\n * export const { useGetPostsQuery, useGetPostQuery } = api;\n * ```\n */\nexport const retry = /* @__PURE__ */ Object.assign(retryWithBackoff, { fail })\n","import type {\n  ThunkDispatch,\n  ActionCreatorWithoutPayload, // Workaround for API-Extractor\n} from '@reduxjs/toolkit'\nimport { createAction } from '@reduxjs/toolkit'\n\nexport const onFocus = /* @__PURE__ */ createAction('__rtkq/focused')\nexport const onFocusLost = /* @__PURE__ */ createAction('__rtkq/unfocused')\nexport const onOnline = /* @__PURE__ */ createAction('__rtkq/online')\nexport const onOffline = /* @__PURE__ */ createAction('__rtkq/offline')\n\nlet initialized = false\n\n/**\n * A utility used to enable `refetchOnMount` and `refetchOnReconnect` behaviors.\n * It requires the dispatch method from your store.\n * Calling `setupListeners(store.dispatch)` will configure listeners with the recommended defaults,\n * but you have the option of providing a callback for more granular control.\n *\n * @example\n * ```ts\n * setupListeners(store.dispatch)\n * ```\n *\n * @param dispatch - The dispatch method from your store\n * @param customHandler - An optional callback for more granular control over listener behavior\n * @returns Return value of the handler.\n * The default handler returns an `unsubscribe` method that can be called to remove the listeners.\n */\nexport function setupListeners(\n  dispatch: ThunkDispatch<any, any, any>,\n  customHandler?: (\n    dispatch: ThunkDispatch<any, any, any>,\n    actions: {\n      onFocus: typeof onFocus\n      onFocusLost: typeof onFocusLost\n      onOnline: typeof onOnline\n      onOffline: typeof onOffline\n    }\n  ) => () => void\n) {\n  function defaultHandler() {\n    const handleFocus = () => dispatch(onFocus())\n    const handleFocusLost = () => dispatch(onFocusLost())\n    const handleOnline = () => dispatch(onOnline())\n    const handleOffline = () => dispatch(onOffline())\n    const handleVisibilityChange = () => {\n      if (window.document.visibilityState === 'visible') {\n        handleFocus()\n      } else {\n        handleFocusLost()\n      }\n    }\n\n    if (!initialized) {\n      if (typeof window !== 'undefined' && window.addEventListener) {\n        // Handle focus events\n        window.addEventListener(\n          'visibilitychange',\n          handleVisibilityChange,\n          false\n        )\n        window.addEventListener('focus', handleFocus, false)\n\n        // Handle connection events\n        window.addEventListener('online', handleOnline, false)\n        window.addEventListener('offline', handleOffline, false)\n        initialized = true\n      }\n    }\n    const unsubscribe = () => {\n      window.removeEventListener('focus', handleFocus)\n      window.removeEventListener('visibilitychange', handleVisibilityChange)\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n      initialized = false\n    }\n    return unsubscribe\n  }\n\n  return customHandler\n    ? customHandler(dispatch, { onFocus, onFocusLost, onOffline, onOnline })\n    : defaultHandler()\n}\n","import { createNextState, createSelector } from '@reduxjs/toolkit'\nimport type {\n  MutationSubState,\n  QuerySubState,\n  RootState as _RootState,\n  RequestStatusFlags,\n} from './apiState'\nimport { QueryStatus, getRequestStatusFlags } from './apiState'\nimport type {\n  EndpointDefinitions,\n  QueryDefinition,\n  MutationDefinition,\n  QueryArgFrom,\n  TagTypesFrom,\n  ReducerPathFrom,\n} from '../endpointDefinitions'\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs'\nimport { getMutationCacheKey } from './buildSlice'\n\nexport type SkipToken = typeof skipToken\n/**\n * Can be passed into `useQuery`, `useQueryState` or `useQuerySubscription`\n * instead of the query argument to get the same effect as if setting\n * `skip: true` in the query options.\n *\n * Useful for scenarios where a query should be skipped when `arg` is `undefined`\n * and TypeScript complains about it because `arg` is not allowed to be passed\n * in as `undefined`, such as\n *\n * ```ts\n * // codeblock-meta title=\"will error if the query argument is not allowed to be undefined\" no-transpile\n * useSomeQuery(arg, { skip: !!arg })\n * ```\n *\n * ```ts\n * // codeblock-meta title=\"using skipToken instead\" no-transpile\n * useSomeQuery(arg ?? skipToken)\n * ```\n *\n * If passed directly into a query or mutation selector, that selector will always\n * return an uninitialized state.\n */\nexport const skipToken = /* @__PURE__ */ Symbol.for('RTKQ/skipToken')\n/** @deprecated renamed to `skipToken` */\nexport const skipSelector = skipToken\n\ndeclare module './module' {\n  export interface ApiEndpointQuery<\n    Definition extends QueryDefinition<any, any, any, any, any>,\n    Definitions extends EndpointDefinitions\n  > {\n    select: QueryResultSelectorFactory<\n      Definition,\n      _RootState<\n        Definitions,\n        TagTypesFrom<Definition>,\n        ReducerPathFrom<Definition>\n      >\n    >\n  }\n\n  export interface ApiEndpointMutation<\n    Definition extends MutationDefinition<any, any, any, any, any>,\n    Definitions extends EndpointDefinitions\n  > {\n    select: MutationResultSelectorFactory<\n      Definition,\n      _RootState<\n        Definitions,\n        TagTypesFrom<Definition>,\n        ReducerPathFrom<Definition>\n      >\n    >\n  }\n}\n\ntype QueryResultSelectorFactory<\n  Definition extends QueryDefinition<any, any, any, any>,\n  RootState\n> = (\n  queryArg: QueryArgFrom<Definition> | SkipToken\n) => (state: RootState) => QueryResultSelectorResult<Definition>\n\nexport type QueryResultSelectorResult<\n  Definition extends QueryDefinition<any, any, any, any>\n> = QuerySubState<Definition> & RequestStatusFlags\n\ntype MutationResultSelectorFactory<\n  Definition extends MutationDefinition<any, any, any, any>,\n  RootState\n> = (\n  requestId:\n    | string\n    | { requestId: string | undefined; fixedCacheKey: string | undefined }\n    | SkipToken\n) => (state: RootState) => MutationResultSelectorResult<Definition>\n\nexport type MutationResultSelectorResult<\n  Definition extends MutationDefinition<any, any, any, any>\n> = MutationSubState<Definition> & RequestStatusFlags\n\nconst initialSubState: QuerySubState<any> = {\n  status: QueryStatus.uninitialized as const,\n}\n\n// abuse immer to freeze default states\nconst defaultQuerySubState = /* @__PURE__ */ createNextState(\n  initialSubState,\n  () => {}\n)\nconst defaultMutationSubState = /* @__PURE__ */ createNextState(\n  initialSubState as MutationSubState<any>,\n  () => {}\n)\n\nexport function buildSelectors<\n  Definitions extends EndpointDefinitions,\n  ReducerPath extends string\n>({\n  serializeQueryArgs,\n  reducerPath,\n}: {\n  serializeQueryArgs: InternalSerializeQueryArgs\n  reducerPath: ReducerPath\n}) {\n  type RootState = _RootState<Definitions, string, string>\n\n  return { buildQuerySelector, buildMutationSelector }\n\n  function withRequestFlags<T extends { status: QueryStatus }>(\n    substate: T\n  ): T & RequestStatusFlags {\n    return {\n      ...substate,\n      ...getRequestStatusFlags(substate.status),\n    }\n  }\n\n  function selectInternalState(rootState: RootState) {\n    const state = rootState[reducerPath]\n    if (process.env.NODE_ENV !== 'production') {\n      if (!state) {\n        if ((selectInternalState as any).triggered) return state\n        ;(selectInternalState as any).triggered = true\n        console.error(\n          `Error: No data found at \\`state.${reducerPath}\\`. Did you forget to add the reducer to the store?`\n        )\n      }\n    }\n    return state\n  }\n\n  function buildQuerySelector(\n    endpointName: string,\n    endpointDefinition: QueryDefinition<any, any, any, any>\n  ): QueryResultSelectorFactory<any, RootState> {\n    return (queryArgs) => {\n      const selectQuerySubState = createSelector(\n        selectInternalState,\n        (internalState) =>\n          (queryArgs === skipToken\n            ? undefined\n            : internalState?.queries?.[\n                serializeQueryArgs({\n                  queryArgs,\n                  endpointDefinition,\n                  endpointName,\n                })\n              ]) ?? defaultQuerySubState\n      )\n      return createSelector(selectQuerySubState, withRequestFlags)\n    }\n  }\n\n  function buildMutationSelector(): MutationResultSelectorFactory<\n    any,\n    RootState\n  > {\n    return (id) => {\n      let mutationId: string | typeof skipToken\n      if (typeof id === 'object') {\n        mutationId = getMutationCacheKey(id) ?? skipToken\n      } else {\n        mutationId = id\n      }\n      const selectMutationSubstate = createSelector(\n        selectInternalState,\n        (internalState) =>\n          (mutationId === skipToken\n            ? undefined\n            : internalState?.mutations?.[mutationId]) ?? defaultMutationSubState\n      )\n      return createSelector(selectMutationSubstate, withRequestFlags)\n    }\n  }\n}\n","import type { AnyAction, ThunkDispatch } from '@reduxjs/toolkit'\nimport type { RootState } from './core/apiState'\nimport type {\n  BaseQueryExtraOptions,\n  BaseQueryFn,\n  BaseQueryResult,\n  BaseQueryArg,\n  BaseQueryApi,\n  QueryReturnValue,\n  BaseQueryError,\n  BaseQueryMeta,\n} from './baseQueryTypes'\nimport type {\n  HasRequiredProps,\n  MaybePromise,\n  OmitFromUnion,\n  CastAny,\n} from './tsHelpers'\nimport type { NEVER } from './fakeBaseQuery'\n\nconst resultType = /* @__PURE__ */ Symbol()\nconst baseQuery = /* @__PURE__ */ Symbol()\n\ninterface EndpointDefinitionWithQuery<\n  QueryArg,\n  BaseQuery extends BaseQueryFn,\n  ResultType\n> {\n  /**\n   * `query` can be a function that returns either a `string` or an `object` which is passed to your `baseQuery`. If you are using [fetchBaseQuery](./fetchBaseQuery), this can return either a `string` or an `object` of properties in `FetchArgs`. If you use your own custom [`baseQuery`](../../rtk-query/usage/customizing-queries), you can customize this behavior to your liking.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"query example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       // highlight-start\n   *       query: () => 'posts',\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  query(arg: QueryArg): BaseQueryArg<BaseQuery>\n  queryFn?: never\n  /**\n   * A function to manipulate the data returned by a query or mutation.\n   */\n  transformResponse?(\n    baseQueryReturnValue: BaseQueryResult<BaseQuery>,\n    meta: BaseQueryMeta<BaseQuery>,\n    arg: QueryArg\n  ): ResultType | Promise<ResultType>\n}\n\ninterface EndpointDefinitionWithQueryFn<\n  QueryArg,\n  BaseQuery extends BaseQueryFn,\n  ResultType\n> {\n  /**\n   * Can be used in place of `query` as an inline function that bypasses `baseQuery` completely for the endpoint.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Basic queryFn example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *     }),\n   *     flipCoin: build.query<'heads' | 'tails', void>({\n   *       // highlight-start\n   *       queryFn(arg, queryApi, extraOptions, baseQuery) {\n   *         const randomVal = Math.random()\n   *         if (randomVal < 0.45) {\n   *           return { data: 'heads' }\n   *         }\n   *         if (randomVal < 0.9) {\n   *           return { data: 'tails' }\n   *         }\n   *         return { error: { status: 500, statusText: 'Internal Server Error', data: \"Coin landed on it's edge!\" } }\n   *       }\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  queryFn(\n    arg: QueryArg,\n    api: BaseQueryApi,\n    extraOptions: BaseQueryExtraOptions<BaseQuery>,\n    baseQuery: (arg: Parameters<BaseQuery>[0]) => ReturnType<BaseQuery>\n  ): MaybePromise<QueryReturnValue<ResultType, BaseQueryError<BaseQuery>>>\n  query?: never\n  transformResponse?: never\n}\n\nexport type BaseEndpointDefinition<\n  QueryArg,\n  BaseQuery extends BaseQueryFn,\n  ResultType\n> = (\n  | ([CastAny<BaseQueryResult<BaseQuery>, {}>] extends [NEVER]\n      ? never\n      : EndpointDefinitionWithQuery<QueryArg, BaseQuery, ResultType>)\n  | EndpointDefinitionWithQueryFn<QueryArg, BaseQuery, ResultType>\n) & {\n  /* phantom type */\n  [resultType]?: ResultType\n  /* phantom type */\n  [baseQuery]?: BaseQuery\n} & HasRequiredProps<\n    BaseQueryExtraOptions<BaseQuery>,\n    { extraOptions: BaseQueryExtraOptions<BaseQuery> },\n    { extraOptions?: BaseQueryExtraOptions<BaseQuery> }\n  >\n\nexport enum DefinitionType {\n  query = 'query',\n  mutation = 'mutation',\n}\n\nexport type GetResultDescriptionFn<\n  TagTypes extends string,\n  ResultType,\n  QueryArg,\n  ErrorType\n> = (\n  result: ResultType | undefined,\n  error: ErrorType | undefined,\n  arg: QueryArg\n) => ReadonlyArray<TagDescription<TagTypes>>\n\nexport type FullTagDescription<TagType> = {\n  type: TagType\n  id?: number | string\n}\nexport type TagDescription<TagType> = TagType | FullTagDescription<TagType>\nexport type ResultDescription<\n  TagTypes extends string,\n  ResultType,\n  QueryArg,\n  ErrorType\n> =\n  | ReadonlyArray<TagDescription<TagTypes>>\n  | GetResultDescriptionFn<TagTypes, ResultType, QueryArg, ErrorType>\n\n/** @deprecated please use `onQueryStarted` instead */\nexport interface QueryApi<ReducerPath extends string, Context extends {}> {\n  /** @deprecated please use `onQueryStarted` instead */\n  dispatch: ThunkDispatch<any, any, AnyAction>\n  /** @deprecated please use `onQueryStarted` instead */\n  getState(): RootState<any, any, ReducerPath>\n  /** @deprecated please use `onQueryStarted` instead */\n  extra: unknown\n  /** @deprecated please use `onQueryStarted` instead */\n  requestId: string\n  /** @deprecated please use `onQueryStarted` instead */\n  context: Context\n}\n\nexport interface QueryExtraOptions<\n  TagTypes extends string,\n  ResultType,\n  QueryArg,\n  BaseQuery extends BaseQueryFn,\n  ReducerPath extends string = string\n> {\n  type: DefinitionType.query\n  /**\n   * Used by `query` endpoints. Determines which 'tag' is attached to the cached data returned by the query.\n   * Expects an array of tag type strings, an array of objects of tag types with ids, or a function that returns such an array.\n   * 1.  `['Post']` - equivalent to `2`\n   * 2.  `[{ type: 'Post' }]` - equivalent to `1`\n   * 3.  `[{ type: 'Post', id: 1 }]`\n   * 4.  `(result, error, arg) => ['Post']` - equivalent to `5`\n   * 5.  `(result, error, arg) => [{ type: 'Post' }]` - equivalent to `4`\n   * 6.  `(result, error, arg) => [{ type: 'Post', id: 1 }]`\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"providesTags example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Posts'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       // highlight-start\n   *       providesTags: (result) =>\n   *         result\n   *           ? [\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n   *               { type: 'Posts', id: 'LIST' },\n   *             ]\n   *           : [{ type: 'Posts', id: 'LIST' }],\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  providesTags?: ResultDescription<\n    TagTypes,\n    ResultType,\n    QueryArg,\n    BaseQueryError<BaseQuery>\n  >\n  /**\n   * Not to be used. A query should not invalidate tags in the cache.\n   */\n  invalidatesTags?: never\n}\n\nexport type QueryDefinition<\n  QueryArg,\n  BaseQuery extends BaseQueryFn,\n  TagTypes extends string,\n  ResultType,\n  ReducerPath extends string = string\n> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType> &\n  QueryExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>\n\nexport interface MutationExtraOptions<\n  TagTypes extends string,\n  ResultType,\n  QueryArg,\n  BaseQuery extends BaseQueryFn,\n  ReducerPath extends string = string\n> {\n  type: DefinitionType.mutation\n  /**\n   * Used by `mutation` endpoints. Determines which cached data should be either re-fetched or removed from the cache.\n   * Expects the same shapes as `providesTags`.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"invalidatesTags example\"\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Posts'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       providesTags: (result) =>\n   *         result\n   *           ? [\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n   *               { type: 'Posts', id: 'LIST' },\n   *             ]\n   *           : [{ type: 'Posts', id: 'LIST' }],\n   *     }),\n   *     addPost: build.mutation<Post, Partial<Post>>({\n   *       query(body) {\n   *         return {\n   *           url: `posts`,\n   *           method: 'POST',\n   *           body,\n   *         }\n   *       },\n   *       // highlight-start\n   *       invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\n   *       // highlight-end\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  invalidatesTags?: ResultDescription<\n    TagTypes,\n    ResultType,\n    QueryArg,\n    BaseQueryError<BaseQuery>\n  >\n  /**\n   * Not to be used. A mutation should not provide tags to the cache.\n   */\n  providesTags?: never\n}\n\nexport type MutationDefinition<\n  QueryArg,\n  BaseQuery extends BaseQueryFn,\n  TagTypes extends string,\n  ResultType,\n  ReducerPath extends string = string\n> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType> &\n  MutationExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>\n\nexport type EndpointDefinition<\n  QueryArg,\n  BaseQuery extends BaseQueryFn,\n  TagTypes extends string,\n  ResultType,\n  ReducerPath extends string = string\n> =\n  | QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\n  | MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\n\nexport type EndpointDefinitions = Record<\n  string,\n  EndpointDefinition<any, any, any, any>\n>\n\nexport function isQueryDefinition(\n  e: EndpointDefinition<any, any, any, any>\n): e is QueryDefinition<any, any, any, any> {\n  return e.type === DefinitionType.query\n}\n\nexport function isMutationDefinition(\n  e: EndpointDefinition<any, any, any, any>\n): e is MutationDefinition<any, any, any, any> {\n  return e.type === DefinitionType.mutation\n}\n\nexport type EndpointBuilder<\n  BaseQuery extends BaseQueryFn,\n  TagTypes extends string,\n  ReducerPath extends string\n> = {\n  /**\n   * An endpoint definition that retrieves data, and may provide tags to the cache.\n   *\n   * @example\n   * ```js\n   * // codeblock-meta title=\"Example of all query endpoint options\"\n   * const api = createApi({\n   *  baseQuery,\n   *  endpoints: (build) => ({\n   *    getPost: build.query({\n   *      query: (id) => ({ url: `post/${id}` }),\n   *      // Pick out data and prevent nested properties in a hook or selector\n   *      transformResponse: (response) => response.data,\n   *      // `result` is the server response\n   *      providesTags: (result, error, id) => [{ type: 'Post', id }],\n   *      // trigger side effects or optimistic updates\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry, updateCachedData }) {},\n   *      // handle subscriptions etc\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry, updateCachedData }) {},\n   *    }),\n   *  }),\n   *});\n   *```\n   */\n  query<ResultType, QueryArg>(\n    definition: OmitFromUnion<\n      QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType>,\n      'type'\n    >\n  ): QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType>\n  /**\n   * An endpoint definition that alters data on the server or will possibly invalidate the cache.\n   *\n   * @example\n   * ```js\n   * // codeblock-meta title=\"Example of all mutation endpoint options\"\n   * const api = createApi({\n   *   baseQuery,\n   *   endpoints: (build) => ({\n   *     updatePost: build.mutation({\n   *       query: ({ id, ...patch }) => ({ url: `post/${id}`, method: 'PATCH', body: patch }),\n   *       // Pick out data and prevent nested properties in a hook or selector\n   *       transformResponse: (response) => response.data,\n   *       // `result` is the server response\n   *       invalidatesTags: (result, error, id) => [{ type: 'Post', id }],\n   *      // trigger side effects or optimistic updates\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry }) {},\n   *      // handle subscriptions etc\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry }) {},\n   *     }),\n   *   }),\n   * });\n   * ```\n   */\n  mutation<ResultType, QueryArg>(\n    definition: OmitFromUnion<\n      MutationDefinition<\n        QueryArg,\n        BaseQuery,\n        TagTypes,\n        ResultType,\n        ReducerPath\n      >,\n      'type'\n    >\n  ): MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>\n}\n\nexport type AssertTagTypes = <T extends FullTagDescription<string>>(t: T) => T\n\nexport function calculateProvidedBy<ResultType, QueryArg, ErrorType>(\n  description:\n    | ResultDescription<string, ResultType, QueryArg, ErrorType>\n    | undefined,\n  result: ResultType | undefined,\n  error: ErrorType | undefined,\n  queryArg: QueryArg,\n  assertTagTypes: AssertTagTypes\n): readonly FullTagDescription<string>[] {\n  if (isFunction(description)) {\n    return description(result as ResultType, error as undefined, queryArg)\n      .map(expandTagDescription)\n      .map(assertTagTypes)\n  }\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes)\n  }\n  return []\n}\n\nfunction isFunction<T>(t: T): t is Extract<T, Function> {\n  return typeof t === 'function'\n}\n\nfunction expandTagDescription(\n  description: TagDescription<string>\n): FullTagDescription<string> {\n  return typeof description === 'string' ? { type: description } : description\n}\n\nexport type QueryArgFrom<D extends BaseEndpointDefinition<any, any, any>> =\n  D extends BaseEndpointDefinition<infer QA, any, any> ? QA : unknown\nexport type ResultTypeFrom<D extends BaseEndpointDefinition<any, any, any>> =\n  D extends BaseEndpointDefinition<any, any, infer RT> ? RT : unknown\n\nexport type ReducerPathFrom<D extends EndpointDefinition<any, any, any, any>> =\n  D extends EndpointDefinition<any, any, any, infer RP> ? RP : unknown\n\nexport type TagTypesFrom<D extends EndpointDefinition<any, any, any, any>> =\n  D extends EndpointDefinition<any, any, infer RP, any> ? RP : unknown\n\nexport type ReplaceTagTypes<\n  Definitions extends EndpointDefinitions,\n  NewTagTypes extends string\n> = {\n  [K in keyof Definitions]: Definitions[K] extends QueryDefinition<\n    infer QueryArg,\n    infer BaseQuery,\n    any,\n    infer ResultType,\n    infer ReducerPath\n  >\n    ? QueryDefinition<QueryArg, BaseQuery, NewTagTypes, ResultType, ReducerPath>\n    : Definitions[K] extends MutationDefinition<\n        infer QueryArg,\n        infer BaseQuery,\n        any,\n        infer ResultType,\n        infer ReducerPath\n      >\n    ? MutationDefinition<\n        QueryArg,\n        BaseQuery,\n        NewTagTypes,\n        ResultType,\n        ReducerPath\n      >\n    : never\n}\n","import type { AnyAction, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  combineReducers,\n  createAction,\n  createSlice,\n  isAnyOf,\n  isFulfilled,\n  isRejectedWithValue,\n} from '@reduxjs/toolkit'\nimport type {\n  CombinedState as CombinedQueryState,\n  QuerySubstateIdentifier,\n  QuerySubState,\n  MutationSubstateIdentifier,\n  MutationSubState,\n  MutationState,\n  QueryState,\n  InvalidationState,\n  Subscribers,\n  QueryCacheKey,\n  SubscriptionState,\n  ConfigState,\n} from './apiState'\nimport { QueryStatus } from './apiState'\nimport type { MutationThunk, QueryThunk } from './buildThunks'\nimport { calculateProvidedByThunk } from './buildThunks'\nimport type {\n  AssertTagTypes,\n  EndpointDefinitions,\n} from '../endpointDefinitions'\nimport type { Patch } from 'immer'\nimport { applyPatches } from 'immer'\nimport { onFocus, onFocusLost, onOffline, onOnline } from './setupListeners'\nimport {\n  isDocumentVisible,\n  isOnline,\n  copyWithStructuralSharing,\n} from '../utils'\nimport type { ApiContext } from '../apiTypes'\nimport { defaultMemoize } from 'reselect'\n\nfunction updateQuerySubstateIfExists(\n  state: QueryState<any>,\n  queryCacheKey: QueryCacheKey,\n  update: (substate: QuerySubState<any>) => void\n) {\n  const substate = state[queryCacheKey]\n  if (substate) {\n    update(substate)\n  }\n}\n\nexport function getMutationCacheKey(\n  id:\n    | MutationSubstateIdentifier\n    | { requestId: string; arg: { fixedCacheKey?: string | undefined } }\n): string\nexport function getMutationCacheKey(id: {\n  fixedCacheKey?: string\n  requestId?: string\n}): string | undefined\n\nexport function getMutationCacheKey(\n  id:\n    | { fixedCacheKey?: string; requestId?: string }\n    | MutationSubstateIdentifier\n    | { requestId: string; arg: { fixedCacheKey?: string | undefined } }\n): string | undefined {\n  return ('arg' in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ?? id.requestId\n}\n\nfunction updateMutationSubstateIfExists(\n  state: MutationState<any>,\n  id:\n    | MutationSubstateIdentifier\n    | { requestId: string; arg: { fixedCacheKey?: string | undefined } },\n  update: (substate: MutationSubState<any>) => void\n) {\n  const substate = state[getMutationCacheKey(id)]\n  if (substate) {\n    update(substate)\n  }\n}\n\nconst initialState = {} as any\n\nexport function buildSlice({\n  reducerPath,\n  queryThunk,\n  mutationThunk,\n  context: {\n    endpointDefinitions: definitions,\n    apiUid,\n    extractRehydrationInfo,\n    hasRehydrationInfo,\n  },\n  assertTagType,\n  config,\n}: {\n  reducerPath: string\n  queryThunk: QueryThunk\n  mutationThunk: MutationThunk\n  context: ApiContext<EndpointDefinitions>\n  assertTagType: AssertTagTypes\n  config: Omit<\n    ConfigState<string>,\n    'online' | 'focused' | 'middlewareRegistered'\n  >\n}) {\n  const resetApiState = createAction(`${reducerPath}/resetApiState`)\n  const querySlice = createSlice({\n    name: `${reducerPath}/queries`,\n    initialState: initialState as QueryState<any>,\n    reducers: {\n      removeQueryResult(\n        draft,\n        { payload: { queryCacheKey } }: PayloadAction<QuerySubstateIdentifier>\n      ) {\n        delete draft[queryCacheKey]\n      },\n      queryResultPatched(\n        draft,\n        {\n          payload: { queryCacheKey, patches },\n        }: PayloadAction<\n          QuerySubstateIdentifier & { patches: readonly Patch[] }\n        >\n      ) {\n        updateQuerySubstateIfExists(draft, queryCacheKey, (substate) => {\n          substate.data = applyPatches(substate.data as any, patches.concat())\n        })\n      },\n    },\n    extraReducers(builder) {\n      builder\n        .addCase(queryThunk.pending, (draft, { meta, meta: { arg } }) => {\n          if (arg.subscribe) {\n            // only initialize substate if we want to subscribe to it\n            draft[arg.queryCacheKey] ??= {\n              status: QueryStatus.uninitialized,\n              endpointName: arg.endpointName,\n            }\n          }\n\n          updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate) => {\n            substate.status = QueryStatus.pending\n            substate.requestId = meta.requestId\n            substate.originalArgs = arg.originalArgs\n            substate.startedTimeStamp = meta.startedTimeStamp\n          })\n        })\n        .addCase(queryThunk.fulfilled, (draft, { meta, payload }) => {\n          updateQuerySubstateIfExists(\n            draft,\n            meta.arg.queryCacheKey,\n            (substate) => {\n              if (substate.requestId !== meta.requestId) return\n              substate.status = QueryStatus.fulfilled\n              substate.data = copyWithStructuralSharing(substate.data, payload)\n              delete substate.error\n              substate.fulfilledTimeStamp = meta.fulfilledTimeStamp\n            }\n          )\n        })\n        .addCase(\n          queryThunk.rejected,\n          (draft, { meta: { condition, arg, requestId }, error, payload }) => {\n            updateQuerySubstateIfExists(\n              draft,\n              arg.queryCacheKey,\n              (substate) => {\n                if (condition) {\n                  // request was aborted due to condition (another query already running)\n                } else {\n                  // request failed\n                  if (substate.requestId !== requestId) return\n                  substate.status = QueryStatus.rejected\n                  substate.error = (payload ?? error) as any\n                }\n              }\n            )\n          }\n        )\n        .addMatcher(hasRehydrationInfo, (draft, action) => {\n          const { queries } = extractRehydrationInfo(action)!\n          for (const [key, entry] of Object.entries(queries)) {\n            if (\n              // do not rehydrate entries that were currently in flight.\n              entry?.status === QueryStatus.fulfilled ||\n              entry?.status === QueryStatus.rejected\n            ) {\n              draft[key] = entry\n            }\n          }\n        })\n    },\n  })\n  const mutationSlice = createSlice({\n    name: `${reducerPath}/mutations`,\n    initialState: initialState as MutationState<any>,\n    reducers: {\n      removeMutationResult(\n        draft,\n        { payload }: PayloadAction<MutationSubstateIdentifier>\n      ) {\n        const cacheKey = getMutationCacheKey(payload)\n        if (cacheKey in draft) {\n          delete draft[cacheKey]\n        }\n      },\n    },\n    extraReducers(builder) {\n      builder\n        .addCase(\n          mutationThunk.pending,\n          (draft, { meta, meta: { requestId, arg, startedTimeStamp } }) => {\n            if (!arg.track) return\n\n            draft[getMutationCacheKey(meta)] = {\n              requestId,\n              status: QueryStatus.pending,\n              endpointName: arg.endpointName,\n              startedTimeStamp,\n            }\n          }\n        )\n        .addCase(mutationThunk.fulfilled, (draft, { payload, meta }) => {\n          if (!meta.arg.track) return\n\n          updateMutationSubstateIfExists(draft, meta, (substate) => {\n            if (substate.requestId !== meta.requestId) return\n            substate.status = QueryStatus.fulfilled\n            substate.data = payload\n            substate.fulfilledTimeStamp = meta.fulfilledTimeStamp\n          })\n        })\n        .addCase(mutationThunk.rejected, (draft, { payload, error, meta }) => {\n          if (!meta.arg.track) return\n\n          updateMutationSubstateIfExists(draft, meta, (substate) => {\n            if (substate.requestId !== meta.requestId) return\n\n            substate.status = QueryStatus.rejected\n            substate.error = (payload ?? error) as any\n          })\n        })\n        .addMatcher(hasRehydrationInfo, (draft, action) => {\n          const { mutations } = extractRehydrationInfo(action)!\n          for (const [key, entry] of Object.entries(mutations)) {\n            if (\n              // do not rehydrate entries that were currently in flight.\n              (entry?.status === QueryStatus.fulfilled ||\n                entry?.status === QueryStatus.rejected) &&\n              // only rehydrate endpoints that were persisted using a `fixedCacheKey`\n              key !== entry?.requestId\n            ) {\n              draft[key] = entry\n            }\n          }\n        })\n    },\n  })\n\n  const invalidationSlice = createSlice({\n    name: `${reducerPath}/invalidation`,\n    initialState: initialState as InvalidationState<string>,\n    reducers: {},\n    extraReducers(builder) {\n      builder\n        .addCase(\n          querySlice.actions.removeQueryResult,\n          (draft, { payload: { queryCacheKey } }) => {\n            for (const tagTypeSubscriptions of Object.values(draft)) {\n              for (const idSubscriptions of Object.values(\n                tagTypeSubscriptions\n              )) {\n                const foundAt = idSubscriptions.indexOf(queryCacheKey)\n                if (foundAt !== -1) {\n                  idSubscriptions.splice(foundAt, 1)\n                }\n              }\n            }\n          }\n        )\n        .addMatcher(hasRehydrationInfo, (draft, action) => {\n          const { provided } = extractRehydrationInfo(action)!\n          for (const [type, incomingTags] of Object.entries(provided)) {\n            for (const [id, cacheKeys] of Object.entries(incomingTags)) {\n              const subscribedQueries = ((draft[type] ??= {})[\n                id || '__internal_without_id'\n              ] ??= [])\n              for (const queryCacheKey of cacheKeys) {\n                const alreadySubscribed =\n                  subscribedQueries.includes(queryCacheKey)\n                if (!alreadySubscribed) {\n                  subscribedQueries.push(queryCacheKey)\n                }\n              }\n            }\n          }\n        })\n        .addMatcher(\n          isAnyOf(isFulfilled(queryThunk), isRejectedWithValue(queryThunk)),\n          (draft, action) => {\n            const providedTags = calculateProvidedByThunk(\n              action,\n              'providesTags',\n              definitions,\n              assertTagType\n            )\n            const { queryCacheKey } = action.meta.arg\n\n            for (const { type, id } of providedTags) {\n              const subscribedQueries = ((draft[type] ??= {})[\n                id || '__internal_without_id'\n              ] ??= [])\n              const alreadySubscribed =\n                subscribedQueries.includes(queryCacheKey)\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey)\n              }\n            }\n          }\n        )\n    },\n  })\n\n  const subscriptionSlice = createSlice({\n    name: `${reducerPath}/subscriptions`,\n    initialState: initialState as SubscriptionState,\n    reducers: {\n      updateSubscriptionOptions(\n        draft,\n        {\n          payload: { queryCacheKey, requestId, options },\n        }: PayloadAction<\n          {\n            endpointName: string\n            requestId: string\n            options: Subscribers[number]\n          } & QuerySubstateIdentifier\n        >\n      ) {\n        if (draft?.[queryCacheKey]?.[requestId]) {\n          draft[queryCacheKey]![requestId] = options\n        }\n      },\n      unsubscribeQueryResult(\n        draft,\n        {\n          payload: { queryCacheKey, requestId },\n        }: PayloadAction<{ requestId: string } & QuerySubstateIdentifier>\n      ) {\n        if (draft[queryCacheKey]) {\n          delete draft[queryCacheKey]![requestId]\n        }\n      },\n    },\n    extraReducers: (builder) => {\n      builder\n        .addCase(\n          querySlice.actions.removeQueryResult,\n          (draft, { payload: { queryCacheKey } }) => {\n            delete draft[queryCacheKey]\n          }\n        )\n        .addCase(queryThunk.pending, (draft, { meta: { arg, requestId } }) => {\n          if (arg.subscribe) {\n            const substate = (draft[arg.queryCacheKey] ??= {})\n            substate[requestId] =\n              arg.subscriptionOptions ?? substate[requestId] ?? {}\n          }\n        })\n        .addCase(\n          queryThunk.rejected,\n          (draft, { meta: { condition, arg, requestId }, error, payload }) => {\n            // request was aborted due to condition (another query already running)\n            if (condition && arg.subscribe) {\n              const substate = (draft[arg.queryCacheKey] ??= {})\n              substate[requestId] =\n                arg.subscriptionOptions ?? substate[requestId] ?? {}\n            }\n          }\n        )\n        // update the state to be a new object to be picked up as a \"state change\"\n        // by redux-persist's `autoMergeLevel2`\n        .addMatcher(hasRehydrationInfo, (draft) => ({ ...draft }))\n    },\n  })\n\n  const configSlice = createSlice({\n    name: `${reducerPath}/config`,\n    initialState: {\n      online: isOnline(),\n      focused: isDocumentVisible(),\n      middlewareRegistered: false,\n      ...config,\n    } as ConfigState<string>,\n    reducers: {\n      middlewareRegistered(state, { payload }: PayloadAction<string>) {\n        state.middlewareRegistered =\n          state.middlewareRegistered === 'conflict' || apiUid !== payload\n            ? 'conflict'\n            : true\n      },\n    },\n    extraReducers: (builder) => {\n      builder\n        .addCase(onOnline, (state) => {\n          state.online = true\n        })\n        .addCase(onOffline, (state) => {\n          state.online = false\n        })\n        .addCase(onFocus, (state) => {\n          state.focused = true\n        })\n        .addCase(onFocusLost, (state) => {\n          state.focused = false\n        })\n        // update the state to be a new object to be picked up as a \"state change\"\n        // by redux-persist's `autoMergeLevel2`\n        .addMatcher(hasRehydrationInfo, (draft) => ({ ...draft }))\n    },\n  })\n\n  const combinedReducer = combineReducers<\n    CombinedQueryState<any, string, string>\n  >({\n    queries: querySlice.reducer,\n    mutations: mutationSlice.reducer,\n    provided: invalidationSlice.reducer,\n    subscriptions: subscriptionSlice.reducer,\n    config: configSlice.reducer,\n  })\n\n  const reducer: typeof combinedReducer = (state, action) =>\n    combinedReducer(resetApiState.match(action) ? undefined : state, action)\n\n  const actions = {\n    ...configSlice.actions,\n    ...querySlice.actions,\n    ...subscriptionSlice.actions,\n    ...mutationSlice.actions,\n    /** @deprecated has been renamed to `removeMutationResult` */\n    unsubscribeMutationResult: mutationSlice.actions.removeMutationResult,\n    resetApiState,\n  }\n\n  return { reducer, actions }\n}\nexport type SliceActions = ReturnType<typeof buildSlice>['actions']\n","import type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs'\nimport type { Api, ApiContext } from '../apiTypes'\nimport type {\n  BaseQueryFn,\n  BaseQueryError,\n  QueryReturnValue,\n} from '../baseQueryTypes'\nimport { BaseQueryArg } from '../baseQueryTypes'\nimport type { RootState, QueryKeys, QuerySubstateIdentifier } from './apiState'\nimport { QueryStatus, CombinedState } from './apiState'\nimport type { StartQueryActionCreatorOptions } from './buildInitiate'\nimport type {\n  AssertTagTypes,\n  EndpointDefinition,\n  EndpointDefinitions,\n  MutationDefinition,\n  QueryArgFrom,\n  QueryDefinition,\n  ResultTypeFrom,\n} from '../endpointDefinitions'\nimport { calculateProvidedBy, FullTagDescription } from '../endpointDefinitions'\nimport type { AsyncThunkPayloadCreator, Draft } from '@reduxjs/toolkit'\nimport {\n  isAllOf,\n  isFulfilled,\n  isPending,\n  isRejected,\n  isRejectedWithValue,\n} from '@reduxjs/toolkit'\nimport type { Patch } from 'immer'\nimport { isDraftable, produceWithPatches } from 'immer'\nimport type {\n  AnyAction,\n  ThunkAction,\n  ThunkDispatch,\n  AsyncThunk,\n} from '@reduxjs/toolkit'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\n\nimport { HandledError } from '../HandledError'\n\nimport type { ApiEndpointQuery, PrefetchOptions } from './module'\nimport type { UnwrapPromise } from '../tsHelpers'\n\ndeclare module './module' {\n  export interface ApiEndpointQuery<\n    Definition extends QueryDefinition<any, any, any, any, any>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Definitions extends EndpointDefinitions\n  > extends Matchers<QueryThunk, Definition> {}\n\n  export interface ApiEndpointMutation<\n    Definition extends MutationDefinition<any, any, any, any, any>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Definitions extends EndpointDefinitions\n  > extends Matchers<MutationThunk, Definition> {}\n}\n\ntype EndpointThunk<\n  Thunk extends QueryThunk | MutationThunk,\n  Definition extends EndpointDefinition<any, any, any, any>\n> = Definition extends EndpointDefinition<\n  infer QueryArg,\n  infer BaseQueryFn,\n  any,\n  infer ResultType\n>\n  ? Thunk extends AsyncThunk<unknown, infer ATArg, infer ATConfig>\n    ? AsyncThunk<\n        ResultType,\n        ATArg & { originalArgs: QueryArg },\n        ATConfig & { rejectValue: BaseQueryError<BaseQueryFn> }\n      >\n    : never\n  : never\n\nexport type PendingAction<\n  Thunk extends QueryThunk | MutationThunk,\n  Definition extends EndpointDefinition<any, any, any, any>\n> = ReturnType<EndpointThunk<Thunk, Definition>['pending']>\n\nexport type FulfilledAction<\n  Thunk extends QueryThunk | MutationThunk,\n  Definition extends EndpointDefinition<any, any, any, any>\n> = ReturnType<EndpointThunk<Thunk, Definition>['fulfilled']>\n\nexport type RejectedAction<\n  Thunk extends QueryThunk | MutationThunk,\n  Definition extends EndpointDefinition<any, any, any, any>\n> = ReturnType<EndpointThunk<Thunk, Definition>['rejected']>\n\nexport type Matcher<M> = (value: any) => value is M\n\nexport interface Matchers<\n  Thunk extends QueryThunk | MutationThunk,\n  Definition extends EndpointDefinition<any, any, any, any>\n> {\n  matchPending: Matcher<PendingAction<Thunk, Definition>>\n  matchFulfilled: Matcher<FulfilledAction<Thunk, Definition>>\n  matchRejected: Matcher<RejectedAction<Thunk, Definition>>\n}\n\nexport interface QueryThunkArg\n  extends QuerySubstateIdentifier,\n    StartQueryActionCreatorOptions {\n  originalArgs: unknown\n  endpointName: string\n}\n\nexport interface MutationThunkArg {\n  originalArgs: unknown\n  endpointName: string\n  track?: boolean\n  fixedCacheKey?: string\n}\n\nexport type ThunkResult = unknown\n\nexport type ThunkApiMetaConfig = {\n  pendingMeta: { startedTimeStamp: number }\n  fulfilledMeta: {\n    fulfilledTimeStamp: number\n    baseQueryMeta: unknown\n  }\n  rejectedMeta: {\n    baseQueryMeta: unknown\n  }\n}\nexport type QueryThunk = AsyncThunk<\n  ThunkResult,\n  QueryThunkArg,\n  ThunkApiMetaConfig\n>\nexport type MutationThunk = AsyncThunk<\n  ThunkResult,\n  MutationThunkArg,\n  ThunkApiMetaConfig\n>\n\nfunction defaultTransformResponse(baseQueryReturnValue: unknown) {\n  return baseQueryReturnValue\n}\n\nexport type MaybeDrafted<T> = T | Draft<T>\nexport type Recipe<T> = (data: MaybeDrafted<T>) => void | MaybeDrafted<T>\n\nexport type PatchQueryDataThunk<\n  Definitions extends EndpointDefinitions,\n  PartialState\n> = <EndpointName extends QueryKeys<Definitions>>(\n  endpointName: EndpointName,\n  args: QueryArgFrom<Definitions[EndpointName]>,\n  patches: readonly Patch[]\n) => ThunkAction<void, PartialState, any, AnyAction>\n\nexport type UpdateQueryDataThunk<\n  Definitions extends EndpointDefinitions,\n  PartialState\n> = <EndpointName extends QueryKeys<Definitions>>(\n  endpointName: EndpointName,\n  args: QueryArgFrom<Definitions[EndpointName]>,\n  updateRecipe: Recipe<ResultTypeFrom<Definitions[EndpointName]>>\n) => ThunkAction<PatchCollection, PartialState, any, AnyAction>\n\n/**\n * An object returned from dispatching a `api.util.updateQueryData` call.\n */\nexport type PatchCollection = {\n  /**\n   * An `immer` Patch describing the cache update.\n   */\n  patches: Patch[]\n  /**\n   * An `immer` Patch to revert the cache update.\n   */\n  inversePatches: Patch[]\n  /**\n   * A function that will undo the cache update.\n   */\n  undo: () => void\n}\n\nexport function buildThunks<\n  BaseQuery extends BaseQueryFn,\n  ReducerPath extends string,\n  Definitions extends EndpointDefinitions\n>({\n  reducerPath,\n  baseQuery,\n  context: { endpointDefinitions },\n  serializeQueryArgs,\n  api,\n}: {\n  baseQuery: BaseQuery\n  reducerPath: ReducerPath\n  context: ApiContext<Definitions>\n  serializeQueryArgs: InternalSerializeQueryArgs\n  api: Api<BaseQuery, Definitions, ReducerPath, any>\n}) {\n  type State = RootState<any, string, ReducerPath>\n\n  const patchQueryData: PatchQueryDataThunk<EndpointDefinitions, State> =\n    (endpointName, args, patches) => (dispatch) => {\n      const endpointDefinition = endpointDefinitions[endpointName]\n      dispatch(\n        api.internalActions.queryResultPatched({\n          queryCacheKey: serializeQueryArgs({\n            queryArgs: args,\n            endpointDefinition,\n            endpointName,\n          }),\n          patches,\n        })\n      )\n    }\n\n  const updateQueryData: UpdateQueryDataThunk<EndpointDefinitions, State> =\n    (endpointName, args, updateRecipe) => (dispatch, getState) => {\n      const currentState = (\n        api.endpoints[endpointName] as ApiEndpointQuery<any, any>\n      ).select(args)(getState())\n      let ret: PatchCollection = {\n        patches: [],\n        inversePatches: [],\n        undo: () =>\n          dispatch(\n            api.util.patchQueryData(endpointName, args, ret.inversePatches)\n          ),\n      }\n      if (currentState.status === QueryStatus.uninitialized) {\n        return ret\n      }\n      if ('data' in currentState) {\n        if (isDraftable(currentState.data)) {\n          const [, patches, inversePatches] = produceWithPatches(\n            currentState.data,\n            updateRecipe\n          )\n          ret.patches.push(...patches)\n          ret.inversePatches.push(...inversePatches)\n        } else {\n          const value = updateRecipe(currentState.data)\n          ret.patches.push({ op: 'replace', path: [], value })\n          ret.inversePatches.push({\n            op: 'replace',\n            path: [],\n            value: currentState.data,\n          })\n        }\n      }\n\n      dispatch(api.util.patchQueryData(endpointName, args, ret.patches))\n\n      return ret\n    }\n\n  const executeEndpoint: AsyncThunkPayloadCreator<\n    ThunkResult,\n    QueryThunkArg | MutationThunkArg,\n    ThunkApiMetaConfig & { state: RootState<any, string, ReducerPath> }\n  > = async (\n    arg,\n    { signal, rejectWithValue, fulfillWithValue, dispatch, getState, extra }\n  ) => {\n    const endpointDefinition = endpointDefinitions[arg.endpointName]\n\n    try {\n      let transformResponse: (\n        baseQueryReturnValue: any,\n        meta: any,\n        arg: any\n      ) => any = defaultTransformResponse\n      let result: QueryReturnValue\n      const baseQueryApi = {\n        signal,\n        dispatch,\n        getState,\n        extra,\n      }\n      if (endpointDefinition.query) {\n        result = await baseQuery(\n          endpointDefinition.query(arg.originalArgs),\n          baseQueryApi,\n          endpointDefinition.extraOptions as any\n        )\n\n        if (endpointDefinition.transformResponse) {\n          transformResponse = endpointDefinition.transformResponse\n        }\n      } else {\n        result = await endpointDefinition.queryFn(\n          arg.originalArgs,\n          baseQueryApi,\n          endpointDefinition.extraOptions as any,\n          (arg) =>\n            baseQuery(arg, baseQueryApi, endpointDefinition.extraOptions as any)\n        )\n      }\n      if (result.error) throw new HandledError(result.error, result.meta)\n\n      return fulfillWithValue(\n        await transformResponse(result.data, result.meta, arg),\n        {\n          fulfilledTimeStamp: Date.now(),\n          baseQueryMeta: result.meta,\n        }\n      )\n    } catch (error) {\n      if (error instanceof HandledError) {\n        return rejectWithValue(error.value, { baseQueryMeta: error.meta })\n      }\n      if (\n        typeof process !== 'undefined' &&\n        process.env.NODE_ENV === 'development'\n      ) {\n        console.error(\n          `An unhandled error occured processing a request for the endpoint \"${arg.endpointName}\".\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".`,\n          error\n        )\n      } else {\n        console.error(error)\n      }\n      throw error\n    }\n  }\n\n  const queryThunk = createAsyncThunk<\n    ThunkResult,\n    QueryThunkArg,\n    ThunkApiMetaConfig & { state: RootState<any, string, ReducerPath> }\n  >(`${reducerPath}/executeQuery`, executeEndpoint, {\n    getPendingMeta() {\n      return { startedTimeStamp: Date.now() }\n    },\n    condition(arg, { getState }) {\n      const state = getState()[reducerPath]\n      const requestState = state?.queries?.[arg.queryCacheKey]\n      const baseFetchOnMountOrArgChange = state.config.refetchOnMountOrArgChange\n\n      const fulfilledVal = requestState?.fulfilledTimeStamp\n      const refetchVal =\n        arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange)\n\n      // Don't retry a request that's currently in-flight\n      if (requestState?.status === 'pending') return false\n\n      // Pull from the cache unless we explicitly force refetch or qualify based on time\n      if (fulfilledVal) {\n        if (refetchVal) {\n          // Return if its true or compare the dates because it must be a number\n          return (\n            refetchVal === true ||\n            (Number(new Date()) - Number(fulfilledVal)) / 1000 >= refetchVal\n          )\n        }\n        // Value is cached and we didn't specify to refresh, skip it.\n        return false\n      }\n\n      return true\n    },\n    dispatchConditionRejection: true,\n  })\n\n  const mutationThunk = createAsyncThunk<\n    ThunkResult,\n    MutationThunkArg,\n    ThunkApiMetaConfig & { state: RootState<any, string, ReducerPath> }\n  >(`${reducerPath}/executeMutation`, executeEndpoint, {\n    getPendingMeta() {\n      return { startedTimeStamp: Date.now() }\n    },\n  })\n\n  const hasTheForce = (options: any): options is { force: boolean } =>\n    'force' in options\n  const hasMaxAge = (\n    options: any\n  ): options is { ifOlderThan: false | number } => 'ifOlderThan' in options\n\n  const prefetch =\n    <EndpointName extends QueryKeys<Definitions>>(\n      endpointName: EndpointName,\n      arg: any,\n      options: PrefetchOptions\n    ): ThunkAction<void, any, any, AnyAction> =>\n    (dispatch: ThunkDispatch<any, any, any>, getState: () => any) => {\n      const force = hasTheForce(options) && options.force\n      const maxAge = hasMaxAge(options) && options.ifOlderThan\n\n      const queryAction = (force: boolean = true) =>\n        (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).initiate(\n          arg,\n          { forceRefetch: force }\n        )\n      const latestStateValue = (\n        api.endpoints[endpointName] as ApiEndpointQuery<any, any>\n      ).select(arg)(getState())\n\n      if (force) {\n        dispatch(queryAction())\n      } else if (maxAge) {\n        const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp\n        if (!lastFulfilledTs) {\n          dispatch(queryAction())\n          return\n        }\n        const shouldRetrigger =\n          (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1000 >=\n          maxAge\n        if (shouldRetrigger) {\n          dispatch(queryAction())\n        }\n      } else {\n        // If prefetching with no options, just let it try\n        dispatch(queryAction(false))\n      }\n    }\n\n  function matchesEndpoint(endpointName: string) {\n    return (action: any): action is AnyAction =>\n      action?.meta?.arg?.endpointName === endpointName\n  }\n\n  function buildMatchThunkActions<\n    Thunk extends\n      | AsyncThunk<any, QueryThunkArg, ThunkApiMetaConfig>\n      | AsyncThunk<any, MutationThunkArg, ThunkApiMetaConfig>\n  >(thunk: Thunk, endpointName: string) {\n    return {\n      matchPending: isAllOf(isPending(thunk), matchesEndpoint(endpointName)),\n      matchFulfilled: isAllOf(\n        isFulfilled(thunk),\n        matchesEndpoint(endpointName)\n      ),\n      matchRejected: isAllOf(isRejected(thunk), matchesEndpoint(endpointName)),\n    } as Matchers<Thunk, any>\n  }\n\n  return {\n    queryThunk,\n    mutationThunk,\n    prefetch,\n    updateQueryData,\n    patchQueryData,\n    buildMatchThunkActions,\n  }\n}\n\nexport function calculateProvidedByThunk(\n  action: UnwrapPromise<\n    ReturnType<ReturnType<QueryThunk>> | ReturnType<ReturnType<MutationThunk>>\n  >,\n  type: 'providesTags' | 'invalidatesTags',\n  endpointDefinitions: EndpointDefinitions,\n  assertTagType: AssertTagTypes\n) {\n  return calculateProvidedBy(\n    endpointDefinitions[action.meta.arg.endpointName][type],\n    isFulfilled(action) ? action.payload : undefined,\n    isRejectedWithValue(action) ? action.payload : undefined,\n    action.meta.arg.originalArgs,\n    assertTagType\n  )\n}\n","import type { QueryCacheKey } from './core/apiState'\nimport type { EndpointDefinition } from './endpointDefinitions'\nimport { isPlainObject } from '@reduxjs/toolkit'\n\nexport const defaultSerializeQueryArgs: SerializeQueryArgs<any> = ({\n  endpointName,\n  queryArgs,\n}) => {\n  // Sort the object keys before stringifying, to prevent useQuery({ a: 1, b: 2 }) having a different cache key than useQuery({ b: 2, a: 1 })\n  return `${endpointName}(${JSON.stringify(queryArgs, (key, value) =>\n    isPlainObject(value)\n      ? Object.keys(value)\n          .sort()\n          .reduce<any>((acc, key) => {\n            acc[key] = (value as any)[key]\n            return acc\n          }, {})\n      : value\n  )})`\n}\n\nexport type SerializeQueryArgs<QueryArgs> = (_: {\n  queryArgs: QueryArgs\n  endpointDefinition: EndpointDefinition<any, any, any, any>\n  endpointName: string\n}) => string\n\nexport type InternalSerializeQueryArgs = (_: {\n  queryArgs: any\n  endpointDefinition: EndpointDefinition<any, any, any, any>\n  endpointName: string\n}) => QueryCacheKey\n","import type { Api, ApiContext, Module, ModuleName } from './apiTypes'\nimport type { CombinedState } from './core/apiState'\nimport type { BaseQueryArg, BaseQueryFn } from './baseQueryTypes'\nimport type { SerializeQueryArgs } from './defaultSerializeQueryArgs'\nimport { defaultSerializeQueryArgs } from './defaultSerializeQueryArgs'\nimport type {\n  EndpointBuilder,\n  EndpointDefinitions,\n} from './endpointDefinitions'\nimport { DefinitionType } from './endpointDefinitions'\nimport { nanoid } from '@reduxjs/toolkit'\nimport type { AnyAction } from '@reduxjs/toolkit'\nimport type { NoInfer } from './tsHelpers'\nimport { defaultMemoize } from 'reselect'\n\nexport interface CreateApiOptions<\n  BaseQuery extends BaseQueryFn,\n  Definitions extends EndpointDefinitions,\n  ReducerPath extends string = 'api',\n  TagTypes extends string = never\n> {\n  /**\n   * The base query used by each endpoint if no `queryFn` option is specified. RTK Query exports a utility called [fetchBaseQuery](./fetchBaseQuery) as a lightweight wrapper around `fetch` for common use-cases. See [Customizing Queries](../../rtk-query/usage/customizing-queries) if `fetchBaseQuery` does not handle your requirements.\n   *\n   * @example\n   *\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   *\n   * const api = createApi({\n   *   // highlight-start\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   // highlight-end\n   *   endpoints: (build) => ({\n   *     // ...endpoints\n   *   }),\n   * })\n   * ```\n   */\n  baseQuery: BaseQuery\n  /**\n   * An array of string tag type names. Specifying tag types is optional, but you should define them so that they can be used for caching and invalidation. When defining an tag type, you will be able to [provide](../../rtk-query/usage/automated-refetching#providing-tags) them with `provides` and [invalidate](../../rtk-query/usage/automated-refetching#invalidating-tags) them with `invalidates` when configuring [endpoints](#endpoints).\n   *\n   * @example\n   *\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   // highlight-start\n   *   tagTypes: ['Post', 'User'],\n   *   // highlight-end\n   *   endpoints: (build) => ({\n   *     // ...endpoints\n   *   }),\n   * })\n   * ```\n   */\n  tagTypes?: readonly TagTypes[]\n  /**\n   * The `reducerPath` is a _unique_ key that your service will be mounted to in your store. If you call `createApi` more than once in your application, you will need to provide a unique value each time. Defaults to `'api'`.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"apis.js\"\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query';\n   *\n   * const apiOne = createApi({\n   *   // highlight-start\n   *   reducerPath: 'apiOne',\n   *   // highlight-end\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (builder) => ({\n   *     // ...endpoints\n   *   }),\n   * });\n   *\n   * const apiTwo = createApi({\n   *   // highlight-start\n   *   reducerPath: 'apiTwo',\n   *   // highlight-end\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (builder) => ({\n   *     // ...endpoints\n   *   }),\n   * });\n   * ```\n   */\n  reducerPath?: ReducerPath\n  /**\n   * Accepts a custom function if you have a need to change the creation of cache keys for any reason.\n   */\n  serializeQueryArgs?: SerializeQueryArgs<BaseQueryArg<BaseQuery>>\n  /**\n   * Endpoints are just a set of operations that you want to perform against your server. You define them as an object using the builder syntax. There are two basic endpoint types: [`query`](../../rtk-query/usage/queries) and [`mutation`](../../rtk-query/usage/mutations).\n   */\n  endpoints(\n    build: EndpointBuilder<BaseQuery, TagTypes, ReducerPath>\n  ): Definitions\n  /**\n   * Defaults to `60` _(this value is in seconds)_. This is how long RTK Query will keep your data cached for **after** the last component unsubscribes. For example, if you query an endpoint, then unmount the component, then mount another component that makes the same request within the given time frame, the most recent value will be served from the cache.\n   *\n   * ```ts\n   * // codeblock-meta title=\"keepUnusedDataFor example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       // highlight-start\n   *       keepUnusedDataFor: 5\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  keepUnusedDataFor?: number\n  /**\n   * Defaults to `false`. This setting allows you to control whether if a cached result is already available RTK Query will only serve a cached result, or if it should `refetch` when set to `true` or if an adequate amount of time has passed since the last successful query result.\n   * - `false` - Will not cause a query to be performed _unless_ it does not exist yet.\n   * - `true` - Will always refetch when a new subscriber to a query is added. Behaves the same as calling the `refetch` callback or passing `forceRefetch: true` in the action creator.\n   * - `number` - **Value is in seconds**. If a number is provided and there is an existing query in the cache, it will compare the current time vs the last fulfilled timestamp, and only refetch if enough time has elapsed.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   */\n  refetchOnMountOrArgChange?: boolean | number\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnFocus?: boolean\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnReconnect?: boolean\n\n  extractRehydrationInfo?: (\n    action: AnyAction,\n    {\n      reducerPath,\n    }: {\n      reducerPath: ReducerPath\n    }\n  ) =>\n    | undefined\n    | CombinedState<\n        NoInfer<Definitions>,\n        NoInfer<TagTypes>,\n        NoInfer<ReducerPath>\n      >\n}\n\nexport type CreateApi<Modules extends ModuleName> = {\n  /**\n   * Creates a service to use in your application. Contains only the basic redux logic (the core module).\n   *\n   * @link https://rtk-query-docs.netlify.app/api/createApi\n   */\n  <\n    BaseQuery extends BaseQueryFn,\n    Definitions extends EndpointDefinitions,\n    ReducerPath extends string = 'api',\n    TagTypes extends string = never\n  >(\n    options: CreateApiOptions<BaseQuery, Definitions, ReducerPath, TagTypes>\n  ): Api<BaseQuery, Definitions, ReducerPath, TagTypes, Modules>\n}\n\n/**\n * Builds a `createApi` method based on the provided `modules`.\n *\n * @link https://rtk-query-docs.netlify.app/concepts/customizing-create-api\n *\n * @example\n * ```ts\n * const MyContext = React.createContext<ReactReduxContextValue>(null as any);\n * const customCreateApi = buildCreateApi(\n *   coreModule(),\n *   reactHooksModule({ useDispatch: createDispatchHook(MyContext) })\n * );\n * ```\n *\n * @param modules - A variable number of modules that customize how the `createApi` method handles endpoints\n * @returns A `createApi` method using the provided `modules`.\n */\nexport function buildCreateApi<Modules extends [Module<any>, ...Module<any>[]]>(\n  ...modules: Modules\n): CreateApi<Modules[number]['name']> {\n  return function baseCreateApi(options) {\n    const extractRehydrationInfo = defaultMemoize((action: AnyAction) =>\n      options.extractRehydrationInfo?.(action, {\n        reducerPath: (options.reducerPath ?? 'api') as any,\n      })\n    )\n    const optionsWithDefaults = {\n      reducerPath: 'api',\n      serializeQueryArgs: defaultSerializeQueryArgs,\n      keepUnusedDataFor: 60,\n      refetchOnMountOrArgChange: false,\n      refetchOnFocus: false,\n      refetchOnReconnect: false,\n      ...options,\n      extractRehydrationInfo,\n      tagTypes: [...(options.tagTypes || [])],\n    }\n\n    const context: ApiContext<EndpointDefinitions> = {\n      endpointDefinitions: {},\n      batch(fn) {\n        // placeholder \"batch\" method to be overridden by plugins, for example with React.unstable_batchedUpdate\n        fn()\n      },\n      apiUid: nanoid(),\n      extractRehydrationInfo,\n      hasRehydrationInfo: defaultMemoize(\n        (action) => extractRehydrationInfo(action) != null\n      ),\n    }\n\n    const api = {\n      injectEndpoints,\n      enhanceEndpoints({ addTagTypes, endpoints }) {\n        if (addTagTypes) {\n          for (const eT of addTagTypes) {\n            if (!optionsWithDefaults.tagTypes.includes(eT as any)) {\n              optionsWithDefaults.tagTypes.push(eT as any)\n            }\n          }\n        }\n        if (endpoints) {\n          for (const [endpointName, partialDefinition] of Object.entries(\n            endpoints\n          )) {\n            if (typeof partialDefinition === 'function') {\n              partialDefinition(context.endpointDefinitions[endpointName])\n            }\n            Object.assign(\n              context.endpointDefinitions[endpointName] || {},\n              partialDefinition\n            )\n          }\n        }\n        return api\n      },\n    } as Api<BaseQueryFn, {}, string, string, Modules[number]['name']>\n\n    const initializedModules = modules.map((m) =>\n      m.init(api as any, optionsWithDefaults, context)\n    )\n\n    function injectEndpoints(\n      inject: Parameters<typeof api.injectEndpoints>[0]\n    ) {\n      const evaluatedEndpoints = inject.endpoints({\n        query: (x) => ({ ...x, type: DefinitionType.query } as any),\n        mutation: (x) => ({ ...x, type: DefinitionType.mutation } as any),\n      })\n\n      for (const [endpointName, definition] of Object.entries(\n        evaluatedEndpoints\n      )) {\n        if (\n          !inject.overrideExisting &&\n          endpointName in context.endpointDefinitions\n        ) {\n          if (\n            typeof process !== 'undefined' &&\n            process.env.NODE_ENV === 'development'\n          ) {\n            console.error(\n              `called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``\n            )\n          }\n\n          continue\n        }\n        context.endpointDefinitions[endpointName] = definition\n        for (const m of initializedModules) {\n          m.injectEndpoint(endpointName, definition)\n        }\n      }\n\n      return api as any\n    }\n\n    return api.injectEndpoints({ endpoints: options.endpoints as any })\n  }\n}\n","import type { BaseQueryFn } from './baseQueryTypes'\n\nconst _NEVER = /* @__PURE__ */ Symbol()\nexport type NEVER = typeof _NEVER\n\n/**\n * Creates a \"fake\" baseQuery to be used if your api *only* uses the `queryFn` definition syntax.\n * This also allows you to specify a specific error type to be shared by all your `queryFn` definitions.\n */\nexport function fakeBaseQuery<ErrorType>(): BaseQueryFn<\n  void,\n  NEVER,\n  ErrorType,\n  {}\n> {\n  return function () {\n    throw new Error(\n      'When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.'\n    )\n  }\n}\n","import { compose } from 'redux'\n\nimport type { AnyAction, Middleware, ThunkDispatch } from '@reduxjs/toolkit'\nimport { createAction } from '@reduxjs/toolkit'\n\nimport type {\n  EndpointDefinitions,\n  FullTagDescription,\n} from '../../endpointDefinitions'\nimport type { QueryStatus, QuerySubState, RootState } from '../apiState'\nimport type { QueryThunkArg } from '../buildThunks'\nimport { build as buildCacheCollection } from './cacheCollection'\nimport { build as buildInvalidationByTags } from './invalidationByTags'\nimport { build as buildPolling } from './polling'\nimport type { BuildMiddlewareInput } from './types'\nimport { build as buildWindowEventHandling } from './windowEventHandling'\nimport { build as buildCacheLifecycle } from './cacheLifecycle'\nimport { build as buildQueryLifecycle } from './queryLifecycle'\nimport { build as buildDevMiddleware } from './devMiddleware'\n\nexport function buildMiddleware<\n  Definitions extends EndpointDefinitions,\n  ReducerPath extends string,\n  TagTypes extends string\n>(input: BuildMiddlewareInput<Definitions, ReducerPath, TagTypes>) {\n  const { reducerPath, queryThunk } = input\n  const actions = {\n    invalidateTags: createAction<\n      Array<TagTypes | FullTagDescription<TagTypes>>\n    >(`${reducerPath}/invalidateTags`),\n  }\n\n  const middlewares = [\n    buildDevMiddleware,\n    buildCacheCollection,\n    buildInvalidationByTags,\n    buildPolling,\n    buildWindowEventHandling,\n    buildCacheLifecycle,\n    buildQueryLifecycle,\n  ].map((build) =>\n    build({\n      ...(input as any as BuildMiddlewareInput<\n        EndpointDefinitions,\n        string,\n        string\n      >),\n      refetchQuery,\n    })\n  )\n  const middleware: Middleware<\n    {},\n    RootState<Definitions, string, ReducerPath>,\n    ThunkDispatch<any, any, AnyAction>\n  > = (mwApi) => (next) => {\n    const applied = compose<typeof next>(\n      ...middlewares.map((middleware) => middleware(mwApi))\n    )(next)\n    return (action) => {\n      if (mwApi.getState()[reducerPath]) {\n        return applied(action)\n      }\n      return next(action)\n    }\n  }\n\n  return { middleware, actions }\n\n  function refetchQuery(\n    querySubState: Exclude<\n      QuerySubState<any>,\n      { status: QueryStatus.uninitialized }\n    >,\n    queryCacheKey: string,\n    override: Partial<QueryThunkArg> = {}\n  ) {\n    return queryThunk({\n      endpointName: querySubState.endpointName,\n      originalArgs: querySubState.originalArgs,\n      subscribe: false,\n      forceRefetch: true,\n      queryCacheKey: queryCacheKey as any,\n      ...override,\n    })\n  }\n}\n","import type { BaseQueryFn } from '../../baseQueryTypes'\nimport type { QueryDefinition } from '../../endpointDefinitions'\nimport type { ConfigState, QueryCacheKey } from '../apiState'\nimport { QuerySubstateIdentifier } from '../apiState'\nimport type {\n  QueryStateMeta,\n  SubMiddlewareApi,\n  SubMiddlewareBuilder,\n  TimeoutId,\n} from './types'\n\nexport type ReferenceCacheCollection = never\n\ndeclare module '../../endpointDefinitions' {\n  interface QueryExtraOptions<\n    TagTypes extends string,\n    ResultType,\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ReducerPath extends string = string\n  > {\n    /**\n     * Overrides the api-wide definition of `keepUnusedDataFor` for this endpoint only. _(This value is in seconds.)_\n     *\n     * This is how long RTK Query will keep your data cached for **after** the last component unsubscribes. For example, if you query an endpoint, then unmount the component, then mount another component that makes the same request within the given time frame, the most recent value will be served from the cache.\n     */\n    keepUnusedDataFor?: number\n  }\n}\n\nexport const build: SubMiddlewareBuilder = ({ reducerPath, api, context }) => {\n  const { removeQueryResult, unsubscribeQueryResult } = api.internalActions\n\n  return (mwApi) => {\n    const currentRemovalTimeouts: QueryStateMeta<TimeoutId> = {}\n\n    return (next) =>\n      (action): any => {\n        const result = next(action)\n\n        if (unsubscribeQueryResult.match(action)) {\n          const state = mwApi.getState()[reducerPath]\n          const { queryCacheKey } = action.payload\n\n          handleUnsubscribe(\n            queryCacheKey,\n            state.queries[queryCacheKey]?.endpointName,\n            mwApi,\n            state.config\n          )\n        }\n\n        if (api.util.resetApiState.match(action)) {\n          for (const [key, timeout] of Object.entries(currentRemovalTimeouts)) {\n            if (timeout) clearTimeout(timeout)\n            delete currentRemovalTimeouts[key]\n          }\n        }\n\n        if (context.hasRehydrationInfo(action)) {\n          const state = mwApi.getState()[reducerPath]\n          const { queries } = context.extractRehydrationInfo(action)!\n          for (const [queryCacheKey, queryState] of Object.entries(queries)) {\n            // Gotcha:\n            // If rehydrating before the endpoint has been injected,the global `keepUnusedDataFor`\n            // will be used instead of the endpoint-specific one.\n            handleUnsubscribe(\n              queryCacheKey as QueryCacheKey,\n              queryState?.endpointName,\n              mwApi,\n              state.config\n            )\n          }\n        }\n\n        return result\n      }\n\n    function handleUnsubscribe(\n      queryCacheKey: QueryCacheKey,\n      endpointName: string | undefined,\n      api: SubMiddlewareApi,\n      config: ConfigState<string>\n    ) {\n      const endpointDefinition = context.endpointDefinitions[\n        endpointName!\n      ] as QueryDefinition<any, any, any, any>\n      const keepUnusedDataFor =\n        endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor\n\n      const currentTimeout = currentRemovalTimeouts[queryCacheKey]\n      if (currentTimeout) {\n        clearTimeout(currentTimeout)\n      }\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {\n        const subscriptions =\n          api.getState()[reducerPath].subscriptions[queryCacheKey]\n        if (!subscriptions || Object.keys(subscriptions).length === 0) {\n          api.dispatch(removeQueryResult({ queryCacheKey }))\n        }\n        delete currentRemovalTimeouts![queryCacheKey]\n      }, keepUnusedDataFor * 1000)\n    }\n  }\n}\n","import { isAnyOf, isFulfilled, isRejectedWithValue } from '@reduxjs/toolkit'\n\nimport type { FullTagDescription } from '../../endpointDefinitions'\nimport { calculateProvidedBy } from '../../endpointDefinitions'\nimport { flatten } from '../../utils'\nimport type { QueryCacheKey } from '../apiState'\nimport { QueryStatus } from '../apiState'\nimport { calculateProvidedByThunk } from '../buildThunks'\nimport type { SubMiddlewareApi, SubMiddlewareBuilder } from './types'\n\nexport const build: SubMiddlewareBuilder = ({\n  reducerPath,\n  context,\n  context: { endpointDefinitions },\n  mutationThunk,\n  api,\n  assertTagType,\n  refetchQuery,\n}) => {\n  const { removeQueryResult } = api.internalActions\n\n  return (mwApi) =>\n    (next) =>\n    (action): any => {\n      const result = next(action)\n\n      if (\n        isAnyOf(\n          isFulfilled(mutationThunk),\n          isRejectedWithValue(mutationThunk)\n        )(action)\n      ) {\n        invalidateTags(\n          calculateProvidedByThunk(\n            action,\n            'invalidatesTags',\n            endpointDefinitions,\n            assertTagType\n          ),\n          mwApi\n        )\n      }\n\n      if (api.util.invalidateTags.match(action)) {\n        invalidateTags(\n          calculateProvidedBy(\n            action.payload,\n            undefined,\n            undefined,\n            undefined,\n            assertTagType\n          ),\n          mwApi\n        )\n      }\n\n      return result\n    }\n\n  function invalidateTags(\n    tags: readonly FullTagDescription<string>[],\n    api: SubMiddlewareApi\n  ) {\n    const state = api.getState()[reducerPath]\n\n    const toInvalidate = new Set<QueryCacheKey>()\n    for (const tag of tags) {\n      const provided = state.provided[tag.type]\n      if (!provided) {\n        continue\n      }\n\n      let invalidateSubscriptions =\n        (tag.id !== undefined\n          ? // id given: invalidate all queries that provide this type & id\n            provided[tag.id]\n          : // no id: invalidate all queries that provide this type\n            flatten(Object.values(provided))) ?? []\n\n      for (const invalidate of invalidateSubscriptions) {\n        toInvalidate.add(invalidate)\n      }\n    }\n\n    context.batch(() => {\n      const valuesArray = Array.from(toInvalidate.values())\n      for (const queryCacheKey of valuesArray) {\n        const querySubState = state.queries[queryCacheKey]\n        const subscriptionSubState = state.subscriptions[queryCacheKey]\n        if (querySubState && subscriptionSubState) {\n          if (Object.keys(subscriptionSubState).length === 0) {\n            api.dispatch(removeQueryResult({ queryCacheKey }))\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            api.dispatch(refetchQuery(querySubState, queryCacheKey))\n          } else {\n          }\n        }\n      }\n    })\n  }\n}\n","/**\n * Alternative to `Array.flat(1)`\n * @param arr An array like [1,2,3,[1,2]]\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\n */\nexport const flatten = (arr: readonly any[]) => [].concat(...arr)\n","import type { QuerySubstateIdentifier, Subscribers } from '../apiState'\nimport { QueryStatus } from '../apiState'\nimport type {\n  QueryStateMeta,\n  SubMiddlewareApi,\n  SubMiddlewareBuilder,\n  TimeoutId,\n} from './types'\n\nexport const build: SubMiddlewareBuilder = ({\n  reducerPath,\n  queryThunk,\n  api,\n  refetchQuery,\n}) => {\n  return (mwApi) => {\n    const currentPolls: QueryStateMeta<{\n      nextPollTimestamp: number\n      timeout?: TimeoutId\n      pollingInterval: number\n    }> = {}\n    return (next) =>\n      (action): any => {\n        const result = next(action)\n\n        if (api.internalActions.updateSubscriptionOptions.match(action)) {\n          updatePollingInterval(action.payload, mwApi)\n        }\n\n        if (\n          queryThunk.pending.match(action) ||\n          (queryThunk.rejected.match(action) && action.meta.condition)\n        ) {\n          updatePollingInterval(action.meta.arg, mwApi)\n        }\n\n        if (\n          queryThunk.fulfilled.match(action) ||\n          (queryThunk.rejected.match(action) && !action.meta.condition)\n        ) {\n          startNextPoll(action.meta.arg, mwApi)\n        }\n\n        if (api.util.resetApiState.match(action)) {\n          clearPolls()\n        }\n\n        return result\n      }\n\n    function startNextPoll(\n      { queryCacheKey }: QuerySubstateIdentifier,\n      api: SubMiddlewareApi\n    ) {\n      const state = api.getState()[reducerPath]\n      const querySubState = state.queries[queryCacheKey]\n      const subscriptions = state.subscriptions[queryCacheKey]\n\n      if (!querySubState || querySubState.status === QueryStatus.uninitialized)\n        return\n\n      const lowestPollingInterval = findLowestPollingInterval(subscriptions)\n      if (!Number.isFinite(lowestPollingInterval)) return\n\n      const currentPoll = currentPolls[queryCacheKey]\n\n      if (currentPoll?.timeout) {\n        clearTimeout(currentPoll.timeout)\n        currentPoll.timeout = undefined\n      }\n\n      const nextPollTimestamp = Date.now() + lowestPollingInterval\n\n      const currentInterval: typeof currentPolls[number] = (currentPolls[\n        queryCacheKey\n      ] = {\n        nextPollTimestamp,\n        pollingInterval: lowestPollingInterval,\n        timeout: setTimeout(() => {\n          currentInterval!.timeout = undefined\n          api.dispatch(refetchQuery(querySubState, queryCacheKey))\n        }, lowestPollingInterval),\n      })\n    }\n\n    function updatePollingInterval(\n      { queryCacheKey }: QuerySubstateIdentifier,\n      api: SubMiddlewareApi\n    ) {\n      const state = api.getState()[reducerPath]\n      const querySubState = state.queries[queryCacheKey]\n      const subscriptions = state.subscriptions[queryCacheKey]\n\n      if (\n        !querySubState ||\n        querySubState.status === QueryStatus.uninitialized\n      ) {\n        return\n      }\n\n      const lowestPollingInterval = findLowestPollingInterval(subscriptions)\n      const currentPoll = currentPolls[queryCacheKey]\n\n      if (!Number.isFinite(lowestPollingInterval)) {\n        if (currentPoll?.timeout) {\n          clearTimeout(currentPoll.timeout)\n        }\n        delete currentPolls[queryCacheKey]\n        return\n      }\n\n      const nextPollTimestamp = Date.now() + lowestPollingInterval\n\n      if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n        startNextPoll({ queryCacheKey }, api)\n      }\n    }\n\n    function clearPolls() {\n      for (const [key, poll] of Object.entries(currentPolls)) {\n        if (poll?.timeout) clearTimeout(poll.timeout)\n        delete currentPolls[key]\n      }\n    }\n  }\n\n  function findLowestPollingInterval(subscribers: Subscribers = {}) {\n    let lowestPollingInterval = Number.POSITIVE_INFINITY\n    for (const subscription of Object.values(subscribers)) {\n      if (!!subscription.pollingInterval)\n        lowestPollingInterval = Math.min(\n          subscription.pollingInterval,\n          lowestPollingInterval\n        )\n    }\n    return lowestPollingInterval\n  }\n}\n","import { QueryStatus } from '../apiState'\nimport { onFocus, onOnline } from '../setupListeners'\nimport type { SubMiddlewareApi, SubMiddlewareBuilder } from './types'\n\nexport const build: SubMiddlewareBuilder = ({\n  reducerPath,\n  context,\n  refetchQuery,\n}) => {\n  return (mwApi) =>\n    (next) =>\n    (action): any => {\n      const result = next(action)\n\n      if (onFocus.match(action)) {\n        refetchValidQueries(mwApi, 'refetchOnFocus')\n      }\n      if (onOnline.match(action)) {\n        refetchValidQueries(mwApi, 'refetchOnReconnect')\n      }\n\n      return result\n    }\n\n  function refetchValidQueries(\n    api: SubMiddlewareApi,\n    type: 'refetchOnFocus' | 'refetchOnReconnect'\n  ) {\n    const state = api.getState()[reducerPath]\n    const queries = state.queries\n    const subscriptions = state.subscriptions\n\n    context.batch(() => {\n      for (const queryCacheKey of Object.keys(subscriptions)) {\n        const querySubState = queries[queryCacheKey]\n        const subscriptionSubState = subscriptions[queryCacheKey]\n\n        if (\n          !subscriptionSubState ||\n          !querySubState ||\n          querySubState.status === QueryStatus.uninitialized\n        )\n          return\n\n        const shouldRefetch =\n          Object.values(subscriptionSubState).some(\n            (sub) => sub[type] === true\n          ) ||\n          (Object.values(subscriptionSubState).every(\n            (sub) => sub[type] === undefined\n          ) &&\n            state.config[type])\n\n        if (shouldRefetch) {\n          api.dispatch(refetchQuery(querySubState, queryCacheKey))\n        }\n      }\n    })\n  }\n}\n","import { isAsyncThunkAction, isFulfilled } from '@reduxjs/toolkit'\nimport type { AnyAction } from 'redux'\nimport type { ThunkDispatch } from 'redux-thunk'\nimport type { BaseQueryFn, BaseQueryMeta } from '../../baseQueryTypes'\nimport { DefinitionType } from '../../endpointDefinitions'\nimport type { RootState } from '../apiState'\nimport type {\n  MutationResultSelectorResult,\n  QueryResultSelectorResult,\n} from '../buildSelectors'\nimport { getMutationCacheKey } from '../buildSlice'\nimport type { PatchCollection, Recipe } from '../buildThunks'\nimport type {\n  PromiseWithKnownReason,\n  SubMiddlewareApi,\n  SubMiddlewareBuilder,\n} from './types'\n\nexport type ReferenceCacheLifecycle = never\n\ndeclare module '../../endpointDefinitions' {\n  export interface QueryBaseLifecycleApi<\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ResultType,\n    ReducerPath extends string = string\n  > extends LifecycleApi<ReducerPath> {\n    /**\n     * Gets the current value of this cache entry.\n     */\n    getCacheEntry(): QueryResultSelectorResult<\n      { type: DefinitionType.query } & BaseEndpointDefinition<\n        QueryArg,\n        BaseQuery,\n        ResultType\n      >\n    >\n    /**\n     * Updates the current cache entry value.\n     * For documentation see `api.util.updateQueryData`.\n     */\n    updateCachedData(updateRecipe: Recipe<ResultType>): PatchCollection\n  }\n\n  export interface MutationBaseLifecycleApi<\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ResultType,\n    ReducerPath extends string = string\n  > extends LifecycleApi<ReducerPath> {\n    /**\n     * Gets the current value of this cache entry.\n     */\n    getCacheEntry(): MutationResultSelectorResult<\n      { type: DefinitionType.mutation } & BaseEndpointDefinition<\n        QueryArg,\n        BaseQuery,\n        ResultType\n      >\n    >\n  }\n\n  export interface LifecycleApi<ReducerPath extends string = string> {\n    /**\n     * The dispatch method for the store\n     */\n    dispatch: ThunkDispatch<any, any, AnyAction>\n    /**\n     * A method to get the current state\n     */\n    getState(): RootState<any, any, ReducerPath>\n    /**\n     * `extra` as provided as `thunk.extraArgument` to the `configureStore` `getDefaultMiddleware` option.\n     */\n    extra: unknown\n    /**\n     * A unique ID generated for the mutation\n     */\n    requestId: string\n  }\n\n  export interface CacheLifecyclePromises<\n    ResultType = unknown,\n    MetaType = unknown\n  > {\n    /**\n     * Promise that will resolve with the first value for this cache key.\n     * This allows you to `await` until an actual value is in cache.\n     *\n     * If the cache entry is removed from the cache before any value has ever\n     * been resolved, this Promise will reject with\n     * `new Error('Promise never resolved before cacheEntryRemoved.')`\n     * to prevent memory leaks.\n     * You can just re-throw that error (or not handle it at all) -\n     * it will be caught outside of `cacheEntryAdded`.\n     *\n     * If you don't interact with this promise, it will not throw.\n     */\n    cacheDataLoaded: PromiseWithKnownReason<\n      {\n        /**\n         * The (transformed) query result.\n         */\n        data: ResultType\n        /**\n         * The `meta` returned by the `baseQuery`\n         */\n        meta: MetaType\n      },\n      typeof neverResolvedError\n    >\n    /**\n     * Promise that allows you to wait for the point in time when the cache entry\n     * has been removed from the cache, by not being used/subscribed to any more\n     * in the application for too long or by dispatching `api.util.resetApiState`.\n     */\n    cacheEntryRemoved: Promise<void>\n  }\n\n  export interface QueryCacheLifecycleApi<\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ResultType,\n    ReducerPath extends string = string\n  > extends QueryBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>,\n      CacheLifecyclePromises<ResultType, BaseQueryMeta<BaseQuery>> {}\n\n  export interface MutationCacheLifecycleApi<\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ResultType,\n    ReducerPath extends string = string\n  > extends MutationBaseLifecycleApi<\n        QueryArg,\n        BaseQuery,\n        ResultType,\n        ReducerPath\n      >,\n      CacheLifecyclePromises<ResultType, BaseQueryMeta<BaseQuery>> {}\n\n  interface QueryExtraOptions<\n    TagTypes extends string,\n    ResultType,\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ReducerPath extends string = string\n  > {\n    onCacheEntryAdded?(\n      arg: QueryArg,\n      api: QueryCacheLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>\n    ): Promise<void> | void\n  }\n\n  interface MutationExtraOptions<\n    TagTypes extends string,\n    ResultType,\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ReducerPath extends string = string\n  > {\n    onCacheEntryAdded?(\n      arg: QueryArg,\n      api: MutationCacheLifecycleApi<\n        QueryArg,\n        BaseQuery,\n        ResultType,\n        ReducerPath\n      >\n    ): Promise<void> | void\n  }\n}\n\nconst neverResolvedError = new Error(\n  'Promise never resolved before cacheEntryRemoved.'\n) as Error & {\n  message: 'Promise never resolved before cacheEntryRemoved.'\n}\n\nexport const build: SubMiddlewareBuilder = ({\n  api,\n  reducerPath,\n  context,\n  queryThunk,\n  mutationThunk,\n}) => {\n  const isQueryThunk = isAsyncThunkAction(queryThunk)\n  const isMutationThunk = isAsyncThunkAction(mutationThunk)\n  const isFullfilledThunk = isFulfilled(queryThunk, mutationThunk)\n\n  return (mwApi) => {\n    type CacheLifecycle = {\n      valueResolved?(value: { data: unknown; meta: unknown }): unknown\n      cacheEntryRemoved(): void\n    }\n    const lifecycleMap: Record<string, CacheLifecycle> = {}\n\n    return (next) =>\n      (action): any => {\n        const stateBefore = mwApi.getState()\n\n        const result = next(action)\n\n        const cacheKey = getCacheKey(action)\n\n        if (queryThunk.pending.match(action)) {\n          const oldState = stateBefore[reducerPath].queries[cacheKey]\n          const state = mwApi.getState()[reducerPath].queries[cacheKey]\n          if (!oldState && state) {\n            handleNewKey(\n              action.meta.arg.endpointName,\n              action.meta.arg.originalArgs,\n              cacheKey,\n              mwApi,\n              action.meta.requestId\n            )\n          }\n        } else if (mutationThunk.pending.match(action)) {\n          const state = mwApi.getState()[reducerPath].mutations[cacheKey]\n          if (state) {\n            handleNewKey(\n              action.meta.arg.endpointName,\n              action.meta.arg.originalArgs,\n              cacheKey,\n              mwApi,\n              action.meta.requestId\n            )\n          }\n        } else if (isFullfilledThunk(action)) {\n          const lifecycle = lifecycleMap[cacheKey]\n          if (lifecycle?.valueResolved) {\n            lifecycle.valueResolved({\n              data: action.payload,\n              meta: action.meta.baseQueryMeta,\n            })\n            delete lifecycle.valueResolved\n          }\n        } else if (\n          api.internalActions.removeQueryResult.match(action) ||\n          api.internalActions.removeMutationResult.match(action)\n        ) {\n          const lifecycle = lifecycleMap[cacheKey]\n          if (lifecycle) {\n            delete lifecycleMap[cacheKey]\n            lifecycle.cacheEntryRemoved()\n          }\n        } else if (api.util.resetApiState.match(action)) {\n          for (const [cacheKey, lifecycle] of Object.entries(lifecycleMap)) {\n            delete lifecycleMap[cacheKey]\n            lifecycle.cacheEntryRemoved()\n          }\n        }\n\n        return result\n      }\n\n    function getCacheKey(action: any) {\n      if (isQueryThunk(action)) return action.meta.arg.queryCacheKey\n      if (isMutationThunk(action)) return action.meta.requestId\n      if (api.internalActions.removeQueryResult.match(action))\n        return action.payload.queryCacheKey\n      if (api.internalActions.removeMutationResult.match(action))\n        return getMutationCacheKey(action.payload)\n      return ''\n    }\n\n    function handleNewKey(\n      endpointName: string,\n      originalArgs: any,\n      queryCacheKey: string,\n      mwApi: SubMiddlewareApi,\n      requestId: string\n    ) {\n      const endpointDefinition = context.endpointDefinitions[endpointName]\n      const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded\n      if (!onCacheEntryAdded) return\n\n      let lifecycle = {} as CacheLifecycle\n\n      const cacheEntryRemoved = new Promise<void>((resolve) => {\n        lifecycle.cacheEntryRemoved = resolve\n      })\n      const cacheDataLoaded: PromiseWithKnownReason<\n        { data: unknown; meta: unknown },\n        typeof neverResolvedError\n      > = Promise.race([\n        new Promise<{ data: unknown; meta: unknown }>((resolve) => {\n          lifecycle.valueResolved = resolve\n        }),\n        cacheEntryRemoved.then(() => {\n          throw neverResolvedError\n        }),\n      ])\n      // prevent uncaught promise rejections from happening.\n      // if the original promise is used in any way, that will create a new promise that will throw again\n      cacheDataLoaded.catch(() => {})\n      lifecycleMap[queryCacheKey] = lifecycle\n      const selector = (api.endpoints[endpointName] as any).select(\n        endpointDefinition.type === DefinitionType.query\n          ? originalArgs\n          : queryCacheKey\n      )\n\n      const extra = mwApi.dispatch((_, __, extra) => extra)\n      const lifecycleApi = {\n        ...mwApi,\n        getCacheEntry: () => selector(mwApi.getState()),\n        requestId,\n        extra,\n        updateCachedData: (endpointDefinition.type === DefinitionType.query\n          ? (updateRecipe: Recipe<any>) =>\n              mwApi.dispatch(\n                api.util.updateQueryData(\n                  endpointName as never,\n                  originalArgs,\n                  updateRecipe\n                )\n              )\n          : undefined) as any,\n\n        cacheDataLoaded,\n        cacheEntryRemoved,\n      }\n\n      const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi)\n      // if a `neverResolvedError` was thrown, but not handled in the running handler, do not let it leak out further\n      Promise.resolve(runningHandler).catch((e) => {\n        if (e === neverResolvedError) return\n        throw e\n      })\n    }\n  }\n}\n","import { isPending, isRejected, isFulfilled } from '@reduxjs/toolkit'\nimport type {\n  BaseQueryError,\n  BaseQueryFn,\n  BaseQueryMeta,\n} from '../../baseQueryTypes'\nimport { DefinitionType } from '../../endpointDefinitions'\nimport type { QueryFulfilledRejectionReason } from '../../endpointDefinitions'\nimport type { Recipe } from '../buildThunks'\nimport type {\n  SubMiddlewareBuilder,\n  PromiseWithKnownReason,\n  PromiseConstructorWithKnownReason,\n} from './types'\n\nexport type ReferenceQueryLifecycle = never\n\ndeclare module '../../endpointDefinitions' {\n  export interface QueryLifecyclePromises<\n    ResultType,\n    BaseQuery extends BaseQueryFn\n  > {\n    /**\n     * Promise that will resolve with the (transformed) query result.\n     *\n     * If the query fails, this promise will reject with the error.\n     *\n     * This allows you to `await` for the query to finish.\n     *\n     * If you don't interact with this promise, it will not throw.\n     */\n    queryFulfilled: PromiseWithKnownReason<\n      {\n        /**\n         * The (transformed) query result.\n         */\n        data: ResultType\n        /**\n         * The `meta` returned by the `baseQuery`\n         */\n        meta: BaseQueryMeta<BaseQuery>\n      },\n      QueryFulfilledRejectionReason<BaseQuery>\n    >\n  }\n\n  type QueryFulfilledRejectionReason<BaseQuery extends BaseQueryFn> =\n    | {\n        error: BaseQueryError<BaseQuery>\n        /**\n         * If this is `false`, that means this error was returned from the `baseQuery` or `queryFn` in a controlled manner.\n         */\n        isUnhandledError: false\n        /**\n         * The `meta` returned by the `baseQuery`\n         */\n        meta: BaseQueryMeta<BaseQuery>\n      }\n    | {\n        error: unknown\n        meta?: undefined\n        /**\n         * If this is `true`, that means that this error is the result of `baseQueryFn`, `queryFn` or `transformResponse` throwing an error instead of handling it properly.\n         * There can not be made any assumption about the shape of `error`.\n         */\n        isUnhandledError: true\n      }\n\n  interface QueryExtraOptions<\n    TagTypes extends string,\n    ResultType,\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ReducerPath extends string = string\n  > {\n    /**\n     * A function that is called when the individual query is started. The function is called with a lifecycle api object containing properties such as `queryFulfilled`, allowing code to be run when a query is started, when it succeeds, and when it fails (i.e. throughout the lifecycle of an individual query/mutation call).\n     *\n     * Can be used to perform side-effects throughout the lifecycle of the query.\n     *\n     * @example\n     * ```ts\n     * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n     * import { messageCreated } from './notificationsSlice\n     * export interface Post {\n     *   id: number\n     *   name: string\n     * }\n     *\n     * const api = createApi({\n     *   baseQuery: fetchBaseQuery({\n     *     baseUrl: '/',\n     *   }),\n     *   endpoints: (build) => ({\n     *     getPost: build.query<Post, number>({\n     *       query: (id) => `post/${id}`,\n     *       async onQueryStarted(id, { dispatch, queryFulfilled }) {\n     *         // `onStart` side-effect\n     *         dispatch(messageCreated('Fetching posts...'))\n     *         try {\n     *           const { data } = await queryFulfilled\n     *           // `onSuccess` side-effect\n     *           dispatch(messageCreated('Posts received!'))\n     *         } catch (err) {\n     *           // `onError` side-effect\n     *           dispatch(messageCreated('Error fetching posts!'))\n     *         }\n     *       }\n     *     }),\n     *   }),\n     * })\n     * ```\n     */\n    onQueryStarted?(\n      arg: QueryArg,\n      api: QueryLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>\n    ): Promise<void> | void\n  }\n\n  interface MutationExtraOptions<\n    TagTypes extends string,\n    ResultType,\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ReducerPath extends string = string\n  > {\n    /**\n     * A function that is called when the individual mutation is started. The function is called with a lifecycle api object containing properties such as `queryFulfilled`, allowing code to be run when a query is started, when it succeeds, and when it fails (i.e. throughout the lifecycle of an individual query/mutation call).\n     *\n     * Can be used for `optimistic updates`.\n     *\n     * @example\n     *\n     * ```ts\n     * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n     * export interface Post {\n     *   id: number\n     *   name: string\n     * }\n     *\n     * const api = createApi({\n     *   baseQuery: fetchBaseQuery({\n     *     baseUrl: '/',\n     *   }),\n     *   tagTypes: ['Post'],\n     *   endpoints: (build) => ({\n     *     getPost: build.query<Post, number>({\n     *       query: (id) => `post/${id}`,\n     *       providesTags: ['Post'],\n     *     }),\n     *     updatePost: build.mutation<void, Pick<Post, 'id'> & Partial<Post>>({\n     *       query: ({ id, ...patch }) => ({\n     *         url: `post/${id}`,\n     *         method: 'PATCH',\n     *         body: patch,\n     *       }),\n     *       invalidatesTags: ['Post'],\n     *       async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n     *         const patchResult = dispatch(\n     *           api.util.updateQueryData('getPost', id, (draft) => {\n     *             Object.assign(draft, patch)\n     *           })\n     *         )\n     *         try {\n     *           await queryFulfilled\n     *         } catch {\n     *           patchResult.undo()\n     *         }\n     *       },\n     *     }),\n     *   }),\n     * })\n     * ```\n     */\n    onQueryStarted?(\n      arg: QueryArg,\n      api: MutationLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>\n    ): Promise<void> | void\n  }\n\n  export interface QueryLifecycleApi<\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ResultType,\n    ReducerPath extends string = string\n  > extends QueryBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>,\n      QueryLifecyclePromises<ResultType, BaseQuery> {}\n\n  export interface MutationLifecycleApi<\n    QueryArg,\n    BaseQuery extends BaseQueryFn,\n    ResultType,\n    ReducerPath extends string = string\n  > extends MutationBaseLifecycleApi<\n        QueryArg,\n        BaseQuery,\n        ResultType,\n        ReducerPath\n      >,\n      QueryLifecyclePromises<ResultType, BaseQuery> {}\n}\n\nexport const build: SubMiddlewareBuilder = ({\n  api,\n  context,\n  queryThunk,\n  mutationThunk,\n}) => {\n  const isPendingThunk = isPending(queryThunk, mutationThunk)\n  const isRejectedThunk = isRejected(queryThunk, mutationThunk)\n  const isFullfilledThunk = isFulfilled(queryThunk, mutationThunk)\n\n  return (mwApi) => {\n    type CacheLifecycle = {\n      resolve(value: { data: unknown; meta: unknown }): unknown\n      reject(value: QueryFulfilledRejectionReason<any>): unknown\n    }\n    const lifecycleMap: Record<string, CacheLifecycle> = {}\n\n    return (next) =>\n      (action): any => {\n        const result = next(action)\n\n        if (isPendingThunk(action)) {\n          const {\n            requestId,\n            arg: { endpointName, originalArgs },\n          } = action.meta\n          const endpointDefinition = context.endpointDefinitions[endpointName]\n          const onQueryStarted = endpointDefinition?.onQueryStarted\n          if (onQueryStarted) {\n            const lifecycle = {} as CacheLifecycle\n            const queryFulfilled =\n              new (Promise as PromiseConstructorWithKnownReason)<\n                { data: unknown; meta: unknown },\n                QueryFulfilledRejectionReason<any>\n              >((resolve, reject) => {\n                lifecycle.resolve = resolve\n                lifecycle.reject = reject\n              })\n            // prevent uncaught promise rejections from happening.\n            // if the original promise is used in any way, that will create a new promise that will throw again\n            queryFulfilled.catch(() => {})\n            lifecycleMap[requestId] = lifecycle\n            const selector = (api.endpoints[endpointName] as any).select(\n              endpointDefinition.type === DefinitionType.query\n                ? originalArgs\n                : requestId\n            )\n\n            const extra = mwApi.dispatch((_, __, extra) => extra)\n            const lifecycleApi = {\n              ...mwApi,\n              getCacheEntry: () => selector(mwApi.getState()),\n              requestId,\n              extra,\n              updateCachedData: (endpointDefinition.type ===\n              DefinitionType.query\n                ? (updateRecipe: Recipe<any>) =>\n                    mwApi.dispatch(\n                      api.util.updateQueryData(\n                        endpointName as never,\n                        originalArgs,\n                        updateRecipe\n                      )\n                    )\n                : undefined) as any,\n              queryFulfilled,\n            }\n            onQueryStarted(originalArgs, lifecycleApi)\n          }\n        } else if (isFullfilledThunk(action)) {\n          const { requestId, baseQueryMeta } = action.meta\n          lifecycleMap[requestId]?.resolve({\n            data: action.payload,\n            meta: baseQueryMeta,\n          })\n          delete lifecycleMap[requestId]\n        } else if (isRejectedThunk(action)) {\n          const { requestId, rejectedWithValue, baseQueryMeta } = action.meta\n          lifecycleMap[requestId]?.reject({\n            error: action.payload ?? action.error,\n            isUnhandledError: !rejectedWithValue,\n            meta: baseQueryMeta as any,\n          })\n          delete lifecycleMap[requestId]\n        }\n\n        return result\n      }\n  }\n}\n","import type { SubMiddlewareBuilder } from './types'\n\nexport const build: SubMiddlewareBuilder = ({\n  api,\n  context: { apiUid },\n  reducerPath,\n}) => {\n  return (mwApi) => {\n    let initialized = false\n    return (next) => (action) => {\n      if (!initialized) {\n        initialized = true\n        // dispatch before any other action\n        mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid))\n      }\n\n      const result = next(action)\n\n      if (api.util.resetApiState.match(action)) {\n        // dispatch after api reset\n        mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid))\n      }\n\n      if (\n        typeof process !== 'undefined' &&\n        process.env.NODE_ENV === 'development'\n      ) {\n        if (\n          api.internalActions.middlewareRegistered.match(action) &&\n          action.payload === apiUid &&\n          mwApi.getState()[reducerPath]?.config?.middlewareRegistered ===\n            'conflict'\n        ) {\n          console.warn(`There is a mismatch between slice and middleware for the reducerPath \"${reducerPath}\".\nYou can only have one api per reducer path, this will lead to crashes in various situations!${\n            reducerPath === 'api'\n              ? `\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!`\n              : ''\n          }`)\n        }\n      }\n\n      return result\n    }\n  }\n}\n","export type Id<T> = { [K in keyof T]: T[K] } & {}\nexport type WithRequiredProp<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Override<T1, T2> = T2 extends any ? Omit<T1, keyof T2> & T2 : never\nexport function assertCast<T>(v: any): asserts v is T {}\n\nexport function safeAssign<T extends object>(\n  target: T,\n  ...args: Array<Partial<NoInfer<T>>>\n) {\n  Object.assign(target, ...args)\n}\n\n/**\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\n */\nexport type UnionToIntersection<U> = (\n  U extends any ? (k: U) => void : never\n) extends (k: infer I) => void\n  ? I\n  : never\n\nexport type NonOptionalKeys<T> = {\n  [K in keyof T]-?: undefined extends T[K] ? never : K\n}[keyof T]\n\nexport type HasRequiredProps<T, True, False> = NonOptionalKeys<T> extends never\n  ? False\n  : True\n\nexport type OptionalIfAllPropsOptional<T> = HasRequiredProps<T, T, T | never>\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type UnwrapPromise<T> = T extends PromiseLike<infer V> ? V : T\n\nexport type MaybePromise<T> = T | PromiseLike<T>\n\nexport type OmitFromUnion<T, K extends keyof T> = T extends any\n  ? Omit<T, K>\n  : never\n\nexport type IsAny<T, True, False = never> = true | false extends (\n  T extends never ? true : false\n)\n  ? True\n  : False\n\nexport type CastAny<T, CastTo> = IsAny<T, CastTo, T>\n","/**\n * Note: this file should import all other files for type discovery and declaration merging\n */\nimport type { PatchQueryDataThunk, UpdateQueryDataThunk } from './buildThunks'\nimport { buildThunks } from './buildThunks'\nimport type {\n  ActionCreatorWithPayload,\n  AnyAction,\n  Middleware,\n  Reducer,\n  ThunkAction,\n  ThunkDispatch,\n} from '@reduxjs/toolkit'\nimport type {\n  EndpointDefinitions,\n  QueryArgFrom,\n  QueryDefinition,\n  MutationDefinition,\n  AssertTagTypes,\n  FullTagDescription,\n} from '../endpointDefinitions'\nimport { isQueryDefinition, isMutationDefinition } from '../endpointDefinitions'\nimport type {\n  CombinedState,\n  QueryKeys,\n  MutationKeys,\n  RootState,\n} from './apiState'\nimport type { Api, Module } from '../apiTypes'\nimport { onFocus, onFocusLost, onOnline, onOffline } from './setupListeners'\nimport { buildSlice } from './buildSlice'\nimport { buildMiddleware } from './buildMiddleware'\nimport { buildSelectors } from './buildSelectors'\nimport type {\n  MutationActionCreatorResult,\n  QueryActionCreatorResult,\n} from './buildInitiate'\nimport { buildInitiate } from './buildInitiate'\nimport { assertCast, safeAssign } from '../tsHelpers'\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs'\nimport type { SliceActions } from './buildSlice'\nimport type { BaseQueryFn } from '../baseQueryTypes'\n\nimport type { ReferenceCacheLifecycle } from './buildMiddleware/cacheLifecycle'\nimport type { ReferenceQueryLifecycle } from './buildMiddleware/queryLifecycle'\nimport type { ReferenceCacheCollection } from './buildMiddleware/cacheCollection'\nimport { enablePatches } from 'immer'\n\n/**\n * `ifOlderThan` - (default: `false` | `number`) - _number is value in seconds_\n * - If specified, it will only run the query if the difference between `new Date()` and the last `fulfilledTimeStamp` is greater than the given value\n *\n * @overloadSummary\n * `force`\n * - If `force: true`, it will ignore the `ifOlderThan` value if it is set and the query will be run even if it exists in the cache.\n */\nexport type PrefetchOptions =\n  | {\n      ifOlderThan?: false | number\n    }\n  | { force?: boolean }\n\nexport const coreModuleName = /* @__PURE__ */ Symbol()\nexport type CoreModule =\n  | typeof coreModuleName\n  | ReferenceCacheLifecycle\n  | ReferenceQueryLifecycle\n  | ReferenceCacheCollection\n\ndeclare module '../apiTypes' {\n  export interface ApiModules<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    BaseQuery extends BaseQueryFn,\n    Definitions extends EndpointDefinitions,\n    ReducerPath extends string,\n    TagTypes extends string\n  > {\n    [coreModuleName]: {\n      /**\n       * This api's reducer should be mounted at `store[api.reducerPath]`.\n       *\n       * @example\n       * ```ts\n       * configureStore({\n       *   reducer: {\n       *     [api.reducerPath]: api.reducer,\n       *   },\n       *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n       * })\n       * ```\n       */\n      reducerPath: ReducerPath\n      /**\n       * Internal actions not part of the public API. Note: These are subject to change at any given time.\n       */\n      internalActions: InternalActions\n      /**\n       *  A standard redux reducer that enables core functionality. Make sure it's included in your store.\n       *\n       * @example\n       * ```ts\n       * configureStore({\n       *   reducer: {\n       *     [api.reducerPath]: api.reducer,\n       *   },\n       *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n       * })\n       * ```\n       */\n      reducer: Reducer<\n        CombinedState<Definitions, TagTypes, ReducerPath>,\n        AnyAction\n      >\n      /**\n       * This is a standard redux middleware and is responsible for things like polling, garbage collection and a handful of other things. Make sure it's included in your store.\n       *\n       * @example\n       * ```ts\n       * configureStore({\n       *   reducer: {\n       *     [api.reducerPath]: api.reducer,\n       *   },\n       *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n       * })\n       * ```\n       */\n      middleware: Middleware<\n        {},\n        RootState<Definitions, string, ReducerPath>,\n        ThunkDispatch<any, any, AnyAction>\n      >\n      /**\n       * A collection of utility thunks for various situations.\n       */\n      util: {\n        getRunningOperationPromises: () => Array<Promise<unknown>>\n        getRunningOperationPromise<EndpointName extends QueryKeys<Definitions>>(\n          endpointName: EndpointName,\n          args: QueryArgFrom<Definitions[EndpointName]>\n        ): QueryActionCreatorResult<Definitions[EndpointName]> | undefined\n        getRunningOperationPromise<\n          EndpointName extends MutationKeys<Definitions>\n        >(\n          endpointName: EndpointName,\n          fixedCacheKeyOrRequestId: string\n        ): MutationActionCreatorResult<Definitions[EndpointName]> | undefined\n\n        /**\n         * A Redux thunk that can be used to manually trigger pre-fetching of data.\n         *\n         * The thunk accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), any relevant query arguments, and a set of options used to determine if the data actually should be re-fetched based on cache staleness.\n         *\n         * React Hooks users will most likely never need to use this directly, as the `usePrefetch` hook will dispatch this thunk internally as needed when you call the prefetching function supplied by the hook.\n         *\n         * @example\n         *\n         * ```ts no-transpile\n         * dispatch(api.util.prefetch('getPosts', undefined, { force: true }))\n         * ```\n         */\n        prefetch<EndpointName extends QueryKeys<Definitions>>(\n          endpointName: EndpointName,\n          arg: QueryArgFrom<Definitions[EndpointName]>,\n          options: PrefetchOptions\n        ): ThunkAction<void, any, any, AnyAction>\n        /**\n         * A Redux thunk action creator that, when dispatched, creates and applies a set of JSON diff/patch objects to the current state. This immediately updates the Redux state with those changes.\n         *\n         * The thunk action creator accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), any relevant query arguments, and a callback function. The callback receives an Immer-wrapped `draft` of the current state, and may modify the draft to match the expected results after the mutation completes successfully.\n         *\n         * The thunk returns an object containing `{patches: Patch[], inversePatches: Patch[], undo: () => void}`. The `patches` and `inversePatches` are generated using Immer's [`produceWithPatches` method](https://immerjs.github.io/immer/patches).\n         *\n         * This is typically used as the first step in implementing optimistic updates. The generated `inversePatches` can be used to revert the updates by calling `dispatch(patchQueryData(endpointName, args, inversePatches))`. Alternatively, the `undo` method can be called directly to achieve the same effect.\n         *\n         * @example\n         *\n         * ```ts\n         * const patchCollection = dispatch(\n         *   api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\n         *     draftPosts.push({ id: 1, name: 'Teddy' })\n         *   })\n         * )\n         * ```\n         */\n        updateQueryData: UpdateQueryDataThunk<\n          Definitions,\n          RootState<Definitions, string, ReducerPath>\n        >\n        /** @deprecated renamed to `updateQueryData` */\n        updateQueryResult: UpdateQueryDataThunk<\n          Definitions,\n          RootState<Definitions, string, ReducerPath>\n        >\n        /**\n         * A Redux thunk that applies a JSON diff/patch array to the cached data for a given query result. This immediately updates the Redux state with those changes.\n         *\n         * The thunk accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), any relevant query arguments, and a JSON diff/patch array as produced by Immer's `produceWithPatches`.\n         *\n         * This is typically used as the second step in implementing optimistic updates. If a request fails, the optimistically-applied changes can be reverted by dispatching `patchQueryData` with the `inversePatches` that were generated by `updateQueryData` earlier.\n         *\n         * In cases where it is desired to simply revert the previous changes, it may be preferable to call the `undo` method returned from dispatching `updateQueryData` instead.\n         *\n         * @example\n         * ```ts\n         * const patchCollection = dispatch(\n         *   api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\n         *     draftPosts.push({ id: 1, name: 'Teddy' })\n         *   })\n         * )\n         *\n         * // later\n         * dispatch(\n         *   api.util.patchQueryData('getPosts', undefined, patchCollection.inversePatches)\n         * )\n         *\n         * // or\n         * patchCollection.undo()\n         * ```\n         */\n        patchQueryData: PatchQueryDataThunk<\n          Definitions,\n          RootState<Definitions, string, ReducerPath>\n        >\n        /** @deprecated renamed to `patchQueryData` */\n        patchQueryResult: PatchQueryDataThunk<\n          Definitions,\n          RootState<Definitions, string, ReducerPath>\n        >\n        /**\n         * A Redux action creator that can be dispatched to manually reset the api state completely. This will immediately remove all existing cache entries, and all queries will be considered 'uninitialized'.\n         *\n         * @example\n         *\n         * ```ts\n         * dispatch(api.util.resetApiState())\n         * ```\n         */\n        resetApiState: SliceActions['resetApiState']\n        /**\n         * A Redux action creator that can be used to manually invalidate cache tags for [automated re-fetching](../../usage/automated-refetching.mdx).\n         *\n         * The action creator accepts one argument: the cache tags to be invalidated. It returns an action with those tags as a payload, and the corresponding `invalidateTags` action type for the api.\n         *\n         * Dispatching the result of this action creator will [invalidate](../../usage/automated-refetching.mdx#invalidating-cache-data) the given tags, causing queries to automatically re-fetch if they are subscribed to cache data that [provides](../../usage/automated-refetching.mdx#providing-cache-data) the corresponding tags.\n         *\n         * The array of tags provided to the action creator should be in one of the following formats, where `TagType` is equal to a string provided to the [`tagTypes`](../createApi.mdx#tagtypes) property of the api:\n         *\n         * - `[TagType]`\n         * - `[{ type: TagType }]`\n         * - `[{ type: TagType, id: number | string }]`\n         *\n         * @example\n         *\n         * ```ts\n         * dispatch(api.util.invalidateTags(['Post']))\n         * dispatch(api.util.invalidateTags([{ type: 'Post', id: 1 }]))\n         * dispatch(\n         *   api.util.invalidateTags([\n         *     { type: 'Post', id: 1 },\n         *     { type: 'Post', id: 'LIST' },\n         *   ])\n         * )\n         * ```\n         */\n        invalidateTags: ActionCreatorWithPayload<\n          Array<TagTypes | FullTagDescription<TagTypes>>,\n          string\n        >\n      }\n      /**\n       * Endpoints based on the input endpoints provided to `createApi`, containing `select` and `action matchers`.\n       */\n      endpoints: {\n        [K in keyof Definitions]: Definitions[K] extends QueryDefinition<\n          any,\n          any,\n          any,\n          any,\n          any\n        >\n          ? ApiEndpointQuery<Definitions[K], Definitions>\n          : Definitions[K] extends MutationDefinition<any, any, any, any, any>\n          ? ApiEndpointMutation<Definitions[K], Definitions>\n          : never\n      }\n    }\n  }\n}\n\nexport interface ApiEndpointQuery<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Definition extends QueryDefinition<any, any, any, any, any>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Definitions extends EndpointDefinitions\n> {}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface ApiEndpointMutation<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Definition extends MutationDefinition<any, any, any, any, any>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Definitions extends EndpointDefinitions\n> {}\n\nexport type ListenerActions = {\n  /**\n   * Will cause the RTK Query middleware to trigger any refetchOnReconnect-related behavior\n   * @link https://rtk-query-docs.netlify.app/api/setupListeners\n   */\n  onOnline: typeof onOnline\n  onOffline: typeof onOffline\n  /**\n   * Will cause the RTK Query middleware to trigger any refetchOnFocus-related behavior\n   * @link https://rtk-query-docs.netlify.app/api/setupListeners\n   */\n  onFocus: typeof onFocus\n  onFocusLost: typeof onFocusLost\n}\n\nexport type InternalActions = SliceActions & ListenerActions\n\n/**\n * Creates a module containing the basic redux logic for use with `buildCreateApi`.\n *\n * @example\n * ```ts\n * const createBaseApi = buildCreateApi(coreModule());\n * ```\n */\nexport const coreModule = (): Module<CoreModule> => ({\n  name: coreModuleName,\n  init(\n    api,\n    {\n      baseQuery,\n      tagTypes,\n      reducerPath,\n      serializeQueryArgs,\n      keepUnusedDataFor,\n      refetchOnMountOrArgChange,\n      refetchOnFocus,\n      refetchOnReconnect,\n    },\n    context\n  ) {\n    enablePatches()\n\n    assertCast<InternalSerializeQueryArgs>(serializeQueryArgs)\n\n    const assertTagType: AssertTagTypes = (tag) => {\n      if (\n        typeof process !== 'undefined' &&\n        process.env.NODE_ENV === 'development'\n      ) {\n        if (!tagTypes.includes(tag.type as any)) {\n          console.error(\n            `Tag type '${tag.type}' was used, but not specified in \\`tagTypes\\`!`\n          )\n        }\n      }\n      return tag\n    }\n\n    Object.assign(api, {\n      reducerPath,\n      endpoints: {},\n      internalActions: {\n        onOnline,\n        onOffline,\n        onFocus,\n        onFocusLost,\n      },\n      util: {},\n    })\n\n    const {\n      queryThunk,\n      mutationThunk,\n      patchQueryData,\n      updateQueryData,\n      prefetch,\n      buildMatchThunkActions,\n    } = buildThunks({\n      baseQuery,\n      reducerPath,\n      context,\n      api,\n      serializeQueryArgs,\n    })\n\n    const { reducer, actions: sliceActions } = buildSlice({\n      context,\n      queryThunk,\n      mutationThunk,\n      reducerPath,\n      assertTagType,\n      config: {\n        refetchOnFocus,\n        refetchOnReconnect,\n        refetchOnMountOrArgChange,\n        keepUnusedDataFor,\n        reducerPath,\n      },\n    })\n\n    safeAssign(api.util, {\n      patchQueryData,\n      updateQueryData,\n      prefetch,\n      resetApiState: sliceActions.resetApiState,\n    })\n    safeAssign(api.internalActions, sliceActions)\n\n    // remove in final release\n    Object.defineProperty(api.util, 'updateQueryResult', {\n      get() {\n        if (\n          typeof process !== 'undefined' &&\n          process.env.NODE_ENV === 'development'\n        ) {\n          console.warn(\n            '`api.util.updateQueryResult` has been renamed to `api.util.updateQueryData`, please change your code accordingly'\n          )\n        }\n        return api.util.updateQueryData\n      },\n    })\n    // remove in final release\n    Object.defineProperty(api.util, 'patchQueryResult', {\n      get() {\n        if (\n          typeof process !== 'undefined' &&\n          process.env.NODE_ENV === 'development'\n        ) {\n          console.warn(\n            '`api.util.patchQueryResult` has been renamed to `api.util.patchQueryData`, please change your code accordingly'\n          )\n        }\n        return api.util.patchQueryData\n      },\n    })\n\n    const { middleware, actions: middlewareActions } = buildMiddleware({\n      reducerPath,\n      context,\n      queryThunk,\n      mutationThunk,\n      api,\n      assertTagType,\n    })\n    safeAssign(api.util, middlewareActions)\n\n    safeAssign(api, { reducer: reducer as any, middleware })\n\n    const { buildQuerySelector, buildMutationSelector } = buildSelectors({\n      serializeQueryArgs: serializeQueryArgs as any,\n      reducerPath,\n    })\n\n    const {\n      buildInitiateQuery,\n      buildInitiateMutation,\n      getRunningOperationPromises,\n      getRunningOperationPromise,\n    } = buildInitiate({\n      queryThunk,\n      mutationThunk,\n      api,\n      serializeQueryArgs: serializeQueryArgs as any,\n      context,\n    })\n\n    safeAssign(api.util, {\n      getRunningOperationPromises,\n      getRunningOperationPromise,\n    })\n\n    return {\n      name: coreModuleName,\n      injectEndpoint(endpointName, definition) {\n        const anyApi = api as any as Api<\n          any,\n          Record<string, any>,\n          string,\n          string,\n          CoreModule\n        >\n        anyApi.endpoints[endpointName] ??= {} as any\n        if (isQueryDefinition(definition)) {\n          safeAssign(\n            anyApi.endpoints[endpointName],\n            {\n              select: buildQuerySelector(endpointName, definition),\n              initiate: buildInitiateQuery(endpointName, definition),\n            },\n            buildMatchThunkActions(queryThunk, endpointName)\n          )\n        } else if (isMutationDefinition(definition)) {\n          safeAssign(\n            anyApi.endpoints[endpointName],\n            {\n              select: buildMutationSelector(),\n              initiate: buildInitiateMutation(endpointName),\n            },\n            buildMatchThunkActions(mutationThunk, endpointName)\n          )\n        }\n      },\n    }\n  },\n})\n","/**\n * Assumes a browser is online if `undefined`, otherwise makes a best effort\n * @link https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n */\nexport function isOnline() {\n  // We set the default config value in the store, so we'd need to check for this in a SSR env\n  return typeof navigator === 'undefined'\n    ? true\n    : navigator.onLine === undefined\n    ? true\n    : navigator.onLine\n}\n","/**\n * Assumes true for a non-browser env, otherwise makes a best effort\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState\n */\nexport function isDocumentVisible(): boolean {\n  // `document` may not exist in non-browser envs (like RN)\n  if (typeof document === 'undefined') {\n    return true\n  }\n  // Match true for visible, prerender, undefined\n  return document.visibilityState !== 'hidden'\n}\n","import type {\n  EndpointDefinitions,\n  QueryDefinition,\n  MutationDefinition,\n  QueryArgFrom,\n  ResultTypeFrom,\n} from '../endpointDefinitions'\nimport { DefinitionType } from '../endpointDefinitions'\nimport type { QueryThunk, MutationThunk } from './buildThunks'\nimport type { AnyAction, ThunkAction, SerializedError } from '@reduxjs/toolkit'\nimport type { QuerySubState, SubscriptionOptions, RootState } from './apiState'\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs'\nimport type { Api, ApiContext } from '../apiTypes'\nimport type { ApiEndpointQuery } from './module'\nimport type { BaseQueryError } from '../baseQueryTypes'\n\ndeclare module './module' {\n  export interface ApiEndpointQuery<\n    Definition extends QueryDefinition<any, any, any, any, any>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Definitions extends EndpointDefinitions\n  > {\n    initiate: StartQueryActionCreator<Definition>\n  }\n\n  export interface ApiEndpointMutation<\n    Definition extends MutationDefinition<any, any, any, any, any>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Definitions extends EndpointDefinitions\n  > {\n    initiate: StartMutationActionCreator<Definition>\n  }\n}\n\nexport interface StartQueryActionCreatorOptions {\n  subscribe?: boolean\n  forceRefetch?: boolean | number\n  subscriptionOptions?: SubscriptionOptions\n}\n\ntype StartQueryActionCreator<\n  D extends QueryDefinition<any, any, any, any, any>\n> = (\n  arg: QueryArgFrom<D>,\n  options?: StartQueryActionCreatorOptions\n) => ThunkAction<QueryActionCreatorResult<D>, any, any, AnyAction>\n\nexport type QueryActionCreatorResult<\n  D extends QueryDefinition<any, any, any, any>\n> = Promise<QuerySubState<D>> & {\n  arg: QueryArgFrom<D>\n  requestId: string\n  subscriptionOptions: SubscriptionOptions | undefined\n  abort(): void\n  unsubscribe(): void\n  refetch(): void\n  updateSubscriptionOptions(options: SubscriptionOptions): void\n}\n\ntype StartMutationActionCreator<\n  D extends MutationDefinition<any, any, any, any>\n> = (\n  arg: QueryArgFrom<D>,\n  options?: {\n    /**\n     * If this mutation should be tracked in the store.\n     * If you just want to manually trigger this mutation using `dispatch` and don't care about the\n     * result, state & potential errors being held in store, you can set this to false.\n     * (defaults to `true`)\n     */\n    track?: boolean\n    fixedCacheKey?: string\n  }\n) => ThunkAction<MutationActionCreatorResult<D>, any, any, AnyAction>\n\nexport type MutationActionCreatorResult<\n  D extends MutationDefinition<any, any, any, any>\n> = Promise<\n  | { data: ResultTypeFrom<D> }\n  | {\n      error:\n        | Exclude<\n            BaseQueryError<\n              D extends MutationDefinition<any, infer BaseQuery, any, any>\n                ? BaseQuery\n                : never\n            >,\n            undefined\n          >\n        | SerializedError\n    }\n> & {\n  /** @internal */\n  arg: {\n    /**\n     * The name of the given endpoint for the mutation\n     */\n    endpointName: string\n    /**\n     * The original arguments supplied to the mutation call\n     */\n    originalArgs: QueryArgFrom<D>\n    /**\n     * Whether the mutation is being tracked in the store.\n     */\n    track?: boolean\n    fixedCacheKey?: string\n  }\n  /**\n   * A unique string generated for the request sequence\n   */\n  requestId: string\n\n  /**\n   * A method to cancel the mutation promise. Note that this is not intended to prevent the mutation\n   * that was fired off from reaching the server, but only to assist in handling the response.\n   *\n   * Calling `abort()` prior to the promise resolving will force it to reach the error state with\n   * the serialized error:\n   * `{ name: 'AbortError', message: 'Aborted' }`\n   *\n   * @example\n   * ```ts\n   * const [updateUser] = useUpdateUserMutation();\n   *\n   * useEffect(() => {\n   *   const promise = updateUser(id);\n   *   promise\n   *     .unwrap()\n   *     .catch((err) => {\n   *       if (err.name === 'AbortError') return;\n   *       // else handle the unexpected error\n   *     })\n   *\n   *   return () => {\n   *     promise.abort();\n   *   }\n   * }, [id, updateUser])\n   * ```\n   */\n  abort(): void\n  /**\n   * Unwraps a mutation call to provide the raw response/error.\n   *\n   * @remarks\n   * If you need to access the error or success payload immediately after a mutation, you can chain .unwrap().\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using .unwrap\"\n   * addPost({ id: 1, name: 'Example' })\n   *   .unwrap()\n   *   .then((payload) => console.log('fulfilled', payload))\n   *   .catch((error) => console.error('rejected', error));\n   * ```\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using .unwrap with async await\"\n   * try {\n   *   const payload = await addPost({ id: 1, name: 'Example' }).unwrap();\n   *   console.log('fulfilled', payload)\n   * } catch (error) {\n   *   console.error('rejected', error);\n   * }\n   * ```\n   */\n  unwrap(): Promise<ResultTypeFrom<D>>\n  /**\n   * A method to manually unsubscribe from the mutation call, meaning it will be removed from cache after the usual caching grace period.\n   The value returned by the hook will reset to `isUninitialized` afterwards.\n   */\n  reset(): void\n  /** @deprecated has been renamed to `reset` */\n  unsubscribe(): void\n}\n\nexport function buildInitiate({\n  serializeQueryArgs,\n  queryThunk,\n  mutationThunk,\n  api,\n  context,\n}: {\n  serializeQueryArgs: InternalSerializeQueryArgs\n  queryThunk: QueryThunk\n  mutationThunk: MutationThunk\n  api: Api<any, EndpointDefinitions, any, any>\n  context: ApiContext<EndpointDefinitions>\n}) {\n  const runningQueries: Record<\n    string,\n    QueryActionCreatorResult<any> | undefined\n  > = {}\n  const runningMutations: Record<\n    string,\n    MutationActionCreatorResult<any> | undefined\n  > = {}\n\n  const {\n    unsubscribeQueryResult,\n    removeMutationResult,\n    updateSubscriptionOptions,\n  } = api.internalActions\n  return {\n    buildInitiateQuery,\n    buildInitiateMutation,\n    getRunningOperationPromises,\n    getRunningOperationPromise,\n  }\n\n  function getRunningOperationPromise(\n    endpointName: string,\n    argOrRequestId: any\n  ): any {\n    const endpointDefinition = context.endpointDefinitions[endpointName]\n    if (endpointDefinition.type === DefinitionType.query) {\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs: argOrRequestId,\n        endpointDefinition,\n        endpointName,\n      })\n      return runningQueries[queryCacheKey]\n    } else {\n      return runningMutations[argOrRequestId]\n    }\n  }\n\n  function getRunningOperationPromises() {\n    return [\n      ...Object.values(runningQueries),\n      ...Object.values(runningMutations),\n    ].filter(<T>(t: T | undefined): t is T => !!t)\n  }\n\n  function middlewareWarning(getState: () => RootState<{}, string, string>) {\n    if (process.env.NODE_ENV !== 'production') {\n      if ((middlewareWarning as any).triggered) return\n      const registered =\n        getState()[api.reducerPath]?.config?.middlewareRegistered\n      if (registered !== undefined) {\n        ;(middlewareWarning as any).triggered = true\n      }\n      if (registered === false) {\n        console.warn(\n          `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\nFeatures like automatic cache collection, automatic refetching etc. will not be available.`\n        )\n      }\n    }\n  }\n\n  function buildInitiateQuery(\n    endpointName: string,\n    endpointDefinition: QueryDefinition<any, any, any, any>\n  ) {\n    const queryAction: StartQueryActionCreator<any> =\n      (arg, { subscribe = true, forceRefetch, subscriptionOptions } = {}) =>\n      (dispatch, getState) => {\n        const queryCacheKey = serializeQueryArgs({\n          queryArgs: arg,\n          endpointDefinition,\n          endpointName,\n        })\n        const thunk = queryThunk({\n          subscribe,\n          forceRefetch,\n          subscriptionOptions,\n          endpointName,\n          originalArgs: arg,\n          queryCacheKey,\n        })\n        const thunkResult = dispatch(thunk)\n        middlewareWarning(getState)\n        const { requestId, abort } = thunkResult\n        const statePromise: QueryActionCreatorResult<any> = Object.assign(\n          Promise.all([runningQueries[queryCacheKey], thunkResult]).then(() =>\n            (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).select(\n              arg\n            )(getState())\n          ),\n          {\n            arg,\n            requestId,\n            subscriptionOptions,\n            abort,\n            refetch() {\n              dispatch(\n                queryAction(arg, { subscribe: false, forceRefetch: true })\n              )\n            },\n            unsubscribe() {\n              if (subscribe)\n                dispatch(\n                  unsubscribeQueryResult({\n                    queryCacheKey,\n                    requestId,\n                  })\n                )\n            },\n            updateSubscriptionOptions(options: SubscriptionOptions) {\n              statePromise.subscriptionOptions = options\n              dispatch(\n                updateSubscriptionOptions({\n                  endpointName,\n                  requestId,\n                  queryCacheKey,\n                  options,\n                })\n              )\n            },\n          }\n        )\n\n        if (!runningQueries[queryCacheKey]) {\n          runningQueries[queryCacheKey] = statePromise\n          statePromise.then(() => {\n            delete runningQueries[queryCacheKey]\n          })\n        }\n\n        return statePromise\n      }\n    return queryAction\n  }\n\n  function buildInitiateMutation(\n    endpointName: string\n  ): StartMutationActionCreator<any> {\n    return (arg, { track = true, fixedCacheKey } = {}) =>\n      (dispatch, getState) => {\n        const thunk = mutationThunk({\n          endpointName,\n          originalArgs: arg,\n          track,\n          fixedCacheKey,\n        })\n        const thunkResult = dispatch(thunk)\n        middlewareWarning(getState)\n        const { requestId, abort } = thunkResult\n        const returnValuePromise = thunkResult\n          .unwrap()\n          .then((data) => ({ data }))\n          .catch((error) => ({ error }))\n\n        const reset = () => {\n          dispatch(removeMutationResult({ requestId, fixedCacheKey }))\n        }\n\n        const ret = Object.assign(returnValuePromise, {\n          arg: thunkResult.arg,\n          requestId,\n          abort,\n          unwrap: thunkResult.unwrap,\n          unsubscribe: reset,\n          reset,\n        })\n\n        runningMutations[requestId] = ret\n        ret.then(() => {\n          delete runningMutations[requestId]\n        })\n        if (fixedCacheKey) {\n          runningMutations[fixedCacheKey] = ret\n          ret.then(() => {\n            if (runningMutations[fixedCacheKey] === ret)\n              delete runningMutations[fixedCacheKey]\n          })\n        }\n\n        return ret\n      }\n  }\n}\n","import { buildCreateApi, CreateApi } from '../createApi'\nimport { coreModule, coreModuleName } from './module'\n\nconst createApi = /* @__PURE__ */ buildCreateApi(coreModule())\n\nexport { createApi, coreModule }\n"]}
